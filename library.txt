
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Lombok (https://habrahabr.ru/post/142356/)
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		Прощаемся с аксессорами
		Деструкция конструкторов
		Генерируем типовые методы: toString, hashCode, equals
		Логгер-невидимка
		Финализируем локальные переменные
		Безнаказанно бросаем исключения
		Правильная синхронизация
		
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- ------------------------------------------------ Фреймворк Apache Maven (http://java-online.ru/maven-pom.xhtml, https://maven.apache.org/guides/getting-started/index.html)
		Apache Maven предназначен для автоматизации процесса сборки проектов на основе описания их структуры в файле на языке POM (Project Object Model), который является подмножеством формата XML.
			maven позволяет выполнять компиляцию кодов, создавать дистрибутив программы, архивные файлы jar/war и генерировать документацию. Простые проекты maven может собрать в командной строке.
			
		Терминология maven
			artifact — это, по сути, любая библиотека, хранящаяся в репозитории, к которой можно отнести зависимость или плагин.
			dependencies - представляют собой библиотеки, которые непосредственно используются в проекте для компиляции или тестирования кода.
			При сборке проекта или для каких-то других целей (deploy, создание файлов проекта для Eclipse и др.) maven использует плагины (plugin).
			
		Центральный репозиторий
			Чтобы самому каждый раз не создавать репозиторий, сообщество для Вас поддерживает центральный репозиторий. 
			Если для сборки вашего проекта не хватает зависимостей, то они по умолчанию автоматически скачиваются с http://repo1.maven.org/maven2. 
			В этом репозитории лежат практически все опенсорсные фреймворки и библиотеки.
	
		Локальный репозиторий
			Локальный репозиторий по умолчанию расположен в <home директория>/.m2/repository. 
			Здесь лежат артефакты которые были скачаны из центрального репозитория либо добавлены другим способом. Например если вы наберёте команду
	
		pom.xml contains the Project Object Model (POM) for this project.
		Archetype is a Maven project templating toolkit. An archetype is defined as an original pattern or model from which all other things of the same kind are made. 
		Under this directory you will notice the following standard project structure.
		my-app
		|-- pom.xml
		`-- src
			|-- main
			|   `-- java
			|       `-- com
			|           `-- mycompany
			|               `-- app
			|                   `-- App.java
			`-- test
				`-- java
					`-- com
						`-- mycompany
							`-- app
								`-- AppTest.java	
-- ------------------------------------------------
			<project xmlns="http://maven.apache.org/POM/4.0.0"
			  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
								  http://maven.apache.org/xsd/maven-4.0.0.xsd">
			  <modelVersion>4.0.0</modelVersion>
			  <groupId>com.mycompany.app</groupId>
			  <artifactId>my-app</artifactId>
			  <packaging>jar</packaging>
			  <version>1.0-SNAPSHOT</version>
			  <name>Maven Quick Start Archetype</name>
			  <url>http://maven.apache.org</url>
			  <dependencies>
				<dependency>
				  <groupId>junit</groupId>
				  <artifactId>junit</artifactId>
				  <version>4.11</version>
				  <scope>test</scope>
				</dependency>
			  </dependencies>
			</project>
			This is a very simple POM but still displays the key elements every POM contains, so let's walk through each of them to familiarize you with the POM essentials:

			project - This is the top-level element in all Maven pom.xml files.
			modelVersion - This element indicates what version of the object model this POM is using. 
				The version of the model itself changes very infrequently but it is mandatory in order to ensure stability of use if and when the Maven developers deem it necessary to change the model.
			groupId - This element indicates the unique identifier of the organization or group that created the project. 
				The groupId is one of the key identifiers of a project and is typically based on the fully qualified domain name of your organization. 
				For example org.apache.maven.plugins is the designated groupId for all Maven plugins.
			artifactId - This element indicates the unique base name of the primary artifact being generated by this project. 
				The primary artifact for a project is typically a JAR file. Secondary artifacts like source bundles also use the artifactId as part of their final name.
				A typical artifact produced by Maven would have the form <artifactId>-<version>.<extension> (for example, myapp-1.0.jar).
			packaging - This element indicates the package type to be used by this artifact (e.g. JAR, WAR, EAR, etc.). 
				This not only means if the artifact produced is JAR, WAR, or EAR but can also indicate a specific lifecycle to use as part of the build process. 
				(The lifecycle is a topic we will deal with further on in the guide. For now, just keep in mind that the indicated packaging of a project can play a part in customizing the build lifecycle.) 
				The default value for the packaging element is JAR so you do not have to specify this for most projects.
			version - This element indicates the version of the artifact generated by the project.
				Maven goes a long way to help you with version management and you will often see the SNAPSHOT designator in a version, which indicates that a project is in a state of development. 
				We will discuss the use of snapshots and how they work further on in this guide.
			name - This element indicates the display name used for the project. This is often used in Maven's generated documentation.
			url - This element indicates where the project's site can be found. This is often used in Maven's generated documentation.
			description - This element provides a basic description of your project. This is often used in Maven's generated documentation.
-- ------------------------------------------------								
		Maven Phases
		Although hardly a comprehensive list, these are the most common default lifecycle phases executed.
			validate: validate the project is correct and all necessary information is available
			compile: compile the source code of the project
			test: test the compiled source code using a suitable unit testing framework. These tests should not require the code be packaged or deployed
			package: take the compiled code and package it in its distributable format, such as a JAR.
			integration-test: process and deploy the package if necessary into an environment where integration tests can be run
			verify: run any checks to verify the package is valid and meets quality criteria
			install: install the package into the local repository, for use as a dependency in other projects locally
			deploy: done in an integration or release environment, copies the final package to the remote repository for sharing with other developers and projects.
		There are two other Maven lifecycles of note beyond the default list above. They are
			clean: cleans up artifacts created by prior builds
			site: generates site documentation for this project