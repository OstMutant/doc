java 8
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
Функціональне програмування
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
Що таке функціональне програмування? Якщо в двох словах, то функціональне програмування - це програмування, в якому функції є об'єктами, і їх можна присвоювати змінним,
 передавати в якості аргументів інших функцій, повертати як результат від функцій і т. п. Переваги,
 
Лямбда-выражение всегда являются реализацией того, что в терминологии Java 8 носит название функциональный интерфейс: класса interface, определяющего единственный абстрактный метод.
Самое значимое нововведение в Java 8 - это лямбда-выражения. Если сказать вообщем, то под ними понимаются анонимные методы, которые при этом еще представляют из себя объект,
 который можно присваивать переменной и передавать как аргумент в другие методы. 


Одним из ключевых моментов в использовании лямбд является отложенное выполнение (deferred execution). 
То есть мы определяем в одном месте программы лямбда-выражение и затем можем его вызывать при необходимости неопределенное количество раз в различных частях программы.
https://stackoverflow.com/questions/32775164/lambda-expression-use-case-and-connection-with-functional-interface
Выше мы рассмотрели лямбда-выражения, которые возвращают определенное значение. Но также могут быть и терминальные лямбды, которые не возвращают никакого значения.
https://metanit.com/java/tutorial/9.1.php

Default метод - это метод в интерфейсе с реализованной логикой, который не требуется обязательно определять в реализации этого интерфейса.Функциональные интерфейсы.

Определив какой-нибудь принципиально новый ноу-хау прототип. 
К чему бы это привело в Java < 8 версий? Вам пришлось бы перелопатить все классы, реализующие данный интерфейс, добавив соответствующую ноу-хау реализацию. 
С дефолтными методами восьмерки вы сможете реализовать нужную функциональность в самом драйвере, не затронув при этом ничего лишнего. 

Функциональный интерфейс - это тот интерфейс, который определяет только один абстрактный метод, как, например, java.lang.Runnable: добавлена аннотация @FunctionalInterface, 
Заметим, интерфейс может включать сколько угодно default методов и при этом оставаться функциональным, потому что default методы - не абстрактные.
Статические методы похожи на методы по умолчанию, за исключением того, что мы не можем переопределить их в классах, реализующих интерфейс.


Java 8 ввела новый метод forEach() в интерфейс java.lang.Iterable
        myList.forEach(new Consumer<Integer>() {
            public void accept(Integer t) {
                System.out.println(t);
            }
        });


// Реализация метода forEach в Java 8
default void forEach(Consumer<? super T> action) {
    Objects.requireNonNull(action);
    for (T t : this) {
        action.accept(t);
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
OOP vs functional programming (https://www.developer.com/java/data/what-is-functional-programming-in-java.html)
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		In OOP, everything is represented as an object; therefore, every solution to a problem must be defined as a scheme of classes and their properties even 
			if we need only to implement the behaviour. 
			This type of situation is the niche for functional programming, where we define only the behaviour through functions and not objects. 
			This means in functional programming we directly implement a function rather than an class that contains a function. 
			This is the basic difference between OOP and functional programming.	

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
functional programming (https://examples.javacodegeeks.com/core-java/java-9-functional-programming-tutorial/)
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------- Functional Programming Basics(http://tutorials.jenkov.com/java-functional-programming/index.html#no-side-effects)
		Functional programming contains the following key concepts:
			Functions as first class objects
			Pure functions
			Higher order functions
		Pure functional programming has a set of rules to follow too:
			No state
			No side effects
			Immutable variables
			Favour recursion over looping


		In computer science, functional programming is a programming paradigm, a style of building the structure and elements of computer programs,
			that treats computation as the evaluation of mathematical functions and avoids changing state and mutable data.
			It is a declarative programming paradigm, which means programming is done with expressions.
		Anonymous function (also function literal or lambda abstraction) is a function definition that is not bound to an identifier. 

------------- INVOKEDYNAMIC(https://www.javaworld.com/article/2860079/learn-java/invokedynamic-101.html)
		invokedynamic is a bytecode instruction that facilitates the implementation of dynamic languages (for the JVM) through dynamic method invocation.
		In a dynamic language, type-checking typically occurs at runtime.
		java.lang.invoke API package to the standard class library.	
		
		A dynamic language (also known as a dynamically-typed language) is a high-level programming language whose type checking is usually performed at runtime, a feature known as dynamic typing. 
		In contrast, a static language (also known as a statically-typed language) performs type checking at compile time, a feature known as static typing. 
		Java is an example of a static language. 
		
------------- A lambda expression has three parts:(http://ocpj8.javastudyguide.com/ch09.html)
			A list of parameters - A lambda expression can have zero (represented by empty parentheses), one or more parameters:
			An arrow - Formed by the characters - and > to separate the parameters and the body.
			A body - The body of the lambda expressions can contain one or more statements.
		The signature of the abstract method of a functional interface provides the signature of a lambda expression (this signature is called a functional descriptor).	
			This means that to use a lambda expression, you first need a functional interface.
		Lambda Expressions(https://www.baeldung.com/java-8-interview-questions)
			In very simple terms, a lambda expression is a function that can be referenced and passed around as an object.
			Lambda expressions introduce functional style processing in Java and facilitate the writing of compact and easy-to-read code.
			Because of this, lambda expressions are a natural replacement for anonymous classes as method arguments. One of their main uses is to define inline implementations of functional interfaces.
			A lambda expression consists of two parts: the parameter part and the expressions part separated by a forward arrow as below:
				params -> expressions
				Any lambda expression has the following characteristics:
					Optional type declaration – when declaring the parameters on the left-hand side of the lambda, we don’t need to declare their types as the compiler can infer them from their values. 
						So int param -> … and param ->… are all valid
					Optional parentheses – when only a single parameter is declared, we don’t need to place it in parentheses. 
						This means param -> … and (param) -> … are all valid. But when more than one parameter is declared, parentheses are required
					Optional curly braces – when the expressions part only has a single statement, there is no need for curly braces. 
						This means that param – > statement and param – > {statement;} are all valid. But curly braces are required when there is more than one statement
					Optional return statement – when the expression returns a value and it is wrapped inside curly braces, then we don’t need a return statement. 
						That means (a, b) – > {return a+b;} and (a, b) – > {a+b;} are both valid
			
		Invoke dynamic (http://surelogic.com/wiki/index.php/InvokeDynamic_and_Lambda_Expressions, https://docs.oracle.com/javase/7/docs/technotes/guides/vm/multiple-language-support.html#invokedynamic)
			The invokedynamic instruction simplifies and potentially improves implementations of compilers and runtime systems for dynamic languages on the JVM
		Динамический язык — язык программирования, который позволяет определять типы данных и осуществлять синтаксический анализ и компиляцию «на лету»,
			на этапе выполнения программы. Динамические языки удобны для быстрой разработки приложений.
			(https://ru.wikipedia.org/wiki/%D0%94%D0%B8%D0%BD%D0%B0%D0%BC%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B9_%D1%8F%D0%B7%D1%8B%D0%BA_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)
        
		Why invokedynamic The short answer is: to generate code in runtime. (https://stackoverflow.com/questions/30002380/why-are-java-8-lambdas-invoked-using-invokedynamic)
		
------------- Method References (https://vertex-academy.com/tutorials/ru/java-8-ssylki-na-metody/, http://ocpj8.javastudyguide.com/ch11.html)				
		We know that we can use lambda expressions instead of using an anonymous class. But sometimes, the lambda expression is really just a call to some method, for example:
			Consumer<String> c = s -> System.out.println(s);
		To make the code clearer, you can turn that lambda expression into a method reference:
			Consumer<String> c = System.out::println;
			
------------- Functional Interfaces (https://www.baeldung.com/java-8-interview-questions)
		Functional interfaces provide target types for lambda expressions and method references.
		A functional interface is an interface with no more, no less but one single abstract method (default methods do not count).
		The arguments and return type of such expression directly match those of the single abstract method.
		For instance, the Runnable interface is a functional interface, so instead of:
		Thread thread = new Thread(new Runnable() {
			public void run() {
				System.out.println("Hello World!");
			}
		});
		you could simply do:
		Thread thread = new Thread(() -> System.out.println("Hello World!"));
		Functional interfaces are usually annotated with the @FunctionalInterface annotation – which is informative and does not affect the semantics.

------------- java.util.function(https://metanit.com/java/tutorial/9.3.php, http://ocpj8.javastudyguide.com/ch10.html)
		В JDK 8 вместе с самой функциональностью лямбда-выражений также было добавлено некоторое количество встроенных функциональных интерфейсов, 
		которые мы можем использовать в различных ситуациях и в различные API в рамках JDK 8
		Function – it takes one argument and returns a result
		Consumer – it takes one argument and returns no result (represents a side effect)
		Supplier – it takes not argument and returns a result
		Predicate – it takes one argument and returns a boolean
		BiFunction – it takes two arguments and returns a result
		BinaryOperator – it is similar to a BiFunction, taking two arguments and returning a result. The two arguments and the result are all of the same types
		UnaryOperator – it is similar to a Function, taking a single argument and returning a result of the same type
		
		Predicate<T> - A predicate is a statement that may be true or false depending on the values of its variables.
			@FunctionalInterface
			public interface Predicate<T> {
				boolean test(T t);
				// Other default and static methods
			}
		Consumer<T> - A consumer is an operation that accepts a single input argument and returns no result; it just execute some operations on the argument.
			@FunctionalInterface
			public interface Consumer<T> {
				 void accept(T t);
				 // And a default method
			}
		Function<T,R> - A function represents an operation that takes an input argument of a certain type and produces a result of another type.
			@FunctionalInterface
			public interface Function<T, R> {
				 R apply(T t);
				 // Other default and static methods
			}
		Supplier<T> - A supplier does the opposite of a consumer, it takes no arguments and only returns some value.
			@FunctionalInterface
			public interface Supplier<T> {
				 T get();
			}
		UnaryOperator<T> - UnaryOperator is just a specialization of the Function interface (in fact, this interface extends from it) for when the argument and the result are of the same type.
			@FunctionalInterface
			public interface UnaryOperator<T>
					 extends Function<T, T> {
				 // Just the identity
				 // method is defined
			}
		BinaryOperator<T> - This interface is a specialization of the BiFunction interface (in fact, this interface extends from it) for when the arguments and the result are of the same type.
			@FunctionalInterface
			public interface BinaryOperator<T>
						 extends BiFunction<T,T,T> {
				 // Two static method are defined
			}

------------- Default Method(https://www.baeldung.com/java-8-interview-questions)
		A default method is a method with an implementation – which can be found in an interface.
		We can use a default method to add a new functionality to an interface while maintaining backward compatibility with classes that are already implementing the interface:
		public interface Vehicle {
			public void move();
			default void hoot() {
				System.out.println("peep!");
			}
		}
		Usually, when a new abstract method is added to an interface, all implementing classes will break until they implement the new abstract method. In Java 8, this problem has been solved by the use of default method.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Optional (https://www.baeldung.com/java-optional)
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
		According to the Oracle documentation, an Optional is a container object that may or may not contain a non-null value. It was introduced in Java 8 to cure the curse of NullPointerExceptions.
		(https://dzone.com/articles/java-8-optional-usage-and-best-practices)


		The purpose of the class is to provide a type-level solution for representing optional values instead of using null references.
		(https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html)
		empty() - Returns an empty Optional instance.
		filter(Predicate<? super T> predicate) - If a value is present, and the value matches the given predicate, return an Optional describing the value, otherwise return an empty Optional.
		flatMap(Function<? super T,Optional<U>> mapper) - If a value is present, apply the provided Optional-bearing mapping function to it, return that result, otherwise return an empty Optional.
		get() - If a value is present in this Optional, returns the value, otherwise throws NoSuchElementException.
		ifPresent(Consumer<? super T> consumer) - If a value is present, invoke the specified consumer with the value, otherwise do nothing.
		isPresent() - Return true if there is a value present, otherwise false.
		map(Function<? super T,? extends U> mapper) - If a value is present, apply the provided mapping function to it, and if the result is non-null, return an Optional describing the result.
		of(T value) - Returns an Optional with the specified present non-null value.
		ofNullable(T value) - Returns an Optional describing the specified value, if non-null, otherwise returns an empty Optional.
		orElse(T other) - Return the value if present, otherwise return other.
		orElseGet(Supplier<? extends T> other) - Return the value if present, otherwise invoke other and return the result of that invocation.
		orElseThrow(Supplier<? extends X> exceptionSupplier) - Return the contained value, if present, otherwise throw an exception to be created by the provided supplier.
		
		Pros and Cons of using Optional Objects in Java(https://www.developer.com/java/java-optional-object/)
			There are a few key pros and cons to using Optional that Java developers should be aware of. 
			Optional can help to prevent NullPointerException errors by making it explicit when a variable may or may not contain a value. 
			This can lead to cleaner and more readable code. Additionally, Optional provides several methods that can be used to safely work with data that may or may not be present. 
			Another benefit of using Optional is that it can be used as an ordinary class, which means that there is no need for special syntax for invoking methods or accessing fields.

			Despite these benefits, there are a few potential downsides to using Optional as well. 
			For one, it can add significant overhead to code execution time, as the Optional wrapper must be created and checked each time a variable is accessed. 
			Additionally, some developers find Optional confusing and difficult to work with, which can lead to more errors instead of fewer and more development time and effort than usual.	
		
		4 Reasons Why You Should Use Java Optional — or Not? (https://medium.com/javarevisited/4-reasons-why-you-should-use-java-optional-or-not-4e44d51a9645)
		Java 8 Optional Usage and Best Practices (https://dzone.com/articles/java-8-optional-usage-and-best-practices)
		Guide To Java 8 Optional(https://www.baeldung.com/java-optional)
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
What are streams? (http://ocpj8.javastudyguide.com/ch12.html)
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		(https://labs.bluesoft.com.br/2017/01/10/java-8-advanced-streams/)
			The order of the result might be surprising. A naive approach would be to execute the operations horizontally one after another on all elements of the stream. 
				But instead each element moves along the chain vertically. The first string “h” passes filter then forEach, only then the second string “e” is processed.
		
		These are the characteristics of a stream (http://ocpj8.javastudyguide.com/ch12.html):
			Streams work perfectly with lambdas. All streams operations take functional interfaces as arguments, so you can simplify the code with lambda expressions (and method references).
			Streams don't store its elements. The elements are stored in a collection or generated on the fly. They are only carried from the source through a pipeline of operations.
			Streams are immutable. Streams don't mutate their underlying source of elements. If, for example, an element is removed from the stream, a new stream with this element removed is created.
			Streams are not reusable. Streams can be traversed only once. After a terminal operation is executed (we'll see what this means in a moment), you have to create another stream from the source to further process it.
			Streams don't support indexed access to their elements. Again, streams are not collections or arrays. The most you can do is get their first element.
			Streams are easily parallelizable. With the call of a method (and following certain rules), you can make a stream execute its operations concurrently, without having to write any multithreading code.
			Stream operations are lazy when possible. Streams defer the execution of their operations either until the results are needed or until it's known how much data is needed.
		
		(https://examples.javacodegeeks.com/core-java/java-9-functional-programming-tutorial/) One of the many reasons you should use them is the Cascade pattern that Streams use. Streams are also immutable. 
			So every time developers manipulate it, they create a new Stream. 
			Another nice thing about them is that they respect the properties of functional programming.
			If developers convert a Data Structure into a Stream and work on it, the original data structure won’t be changed. 
		
		Cascade Method pattern or Train Wreck pattern (https://dzone.com/articles/train-wreck-pattern-%E2%80%93-much)
		
		(http://ocpj8.javastudyguide.com/ch12.html)
			Intermediate operations - You can easily identify intermediate operations; they always return a new stream. This allows the operations to be connected.
			Terminal operations - You can also easily identify terminal operations, they always return something other than a stream.
			After the terminal operation is performed, the stream pipeline is consumed, and can't be used anymore

		Stream pipelining is the concept of chaining operations together.(http://www.java2novice.com/java_interview_questions/java-8-stream-pipelining/)
			This is done by splitting the operations that can happen on a stream into two categories.
			They are "intermediate operations" and "terminal operations". Each intermediate operation returns an instance of Stream itself when it runs, an arbitrary number of intermediate operations can,
				therefore, be set up to process data forming a processing pipeline. There must then be a terminal operation which returns a final value and terminates the pipeline.
		
	
		How Java-8 Streams differ from collections?	(http://www.java2novice.com/java_interview_questions/java-8-streams-vs-collection-framework/)	
		First of all, please note that "Streams are not collections". java.util.stream is introduced to process elements in sequence.
			Streams are wrappers for collections and arrays. They wrap an existing collection to support operations expressed with lambdas, so you specify what you want to do, not how to do it.

		Performance With Java8 Streams(https://dzone.com/articles/performance-with-java8-streams)
		Parallelism
			Parallelism utilizes hardware capabilities at their best, as nowadays, more CPU cores are available on a computer, so it doesn't make sense to have a single thread in a multi-core system. 
			In Java Streams, parallelism is achieved by using the  Fork-Join principle. As per the Fork-Join principle, it divides larger tasks into smaller sub-tasks (known as forking), 
				and then processes the sub-tasks in parallel to utilize all the available hardware, then combines the results together (known as Join) to form an integrated result.
			Note: Results may vary on different hardware.
		Laziness.
			As we know, Java8 Streams have two types of operations, known as Intermediate and Terminal. 
			These two operations are meant for processing and providing the end results, respectively. 
			In summary, intermediate operations just create another stream, but won't perform any processing until the terminal operation is called.
			Once the terminal operation is called, traversal of streams begins and the associated function is applied one by one. 
			Intermediate operations are lazy operations, so Streams supports laziness.
		Short-Circuit Behavior
			This is another way of optimizing the Streams processing. Short-circuiting will terminate the processing once condition met. 
			There are a number of short-circuiting operations available. For e.g. anyMatch, allMatch, findFirst, findAny, limit, etc.
		Stateful Intermediate Operations
			These intermediate operations need to store the state, and hence can cause bad performance of your applications, e.g. distinct(), sort(), limit(), etc.
		Stateless Intermediate Operations
			These intermediate operations can be processed independently as they don't need to remember the state, e.g. filter(), map(), etc.
			
		Intermediate and Terminal Operations(https://brushmyskills.com/java-8/intermediate-terminal-operations-stream-api-java-8/, https://stackify.com/streams-guide-java-8/)
		Intermediate operations are composed forming a pipeline of a Stream execution and not executed in Stream unit some terminal operation is invoked. The intermediate operation can be added to a Stream pipeline by methods:
			Stream<T>	filter(Predicate<? super T> predicate) - Returns a stream consisting of the elements of this stream that match the given predicate.
			<R> Stream<R>	map(Function<? super T,? extends R> mapper) - Returns a stream consisting of the results of applying the given function to the elements of this stream.
			<R> Stream<R>	flatMap(Function<? super T,? extends Stream<? extends R>> mapper) - Returns a stream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element.
			Stream<T> distinct() - Returns a stream consisting of the distinct elements (according to Object.equals(Object)) of this stream.
			Stream<T>	sorted() - Returns a stream consisting of the elements of this stream, sorted according to natural order. If the elements of this stream are not Comparable, a java.lang.ClassCastException may be thrown when the terminal operation is executed.
			Stream<T>	peek(Consumer<? super T> action) - Returns a stream consisting of the elements of this stream, additionally performing the provided action on each element as elements are consumed from the resulting stream.
			Stream<T>	skip(long n) - Returns a stream consisting of the remaining elements of this stream after discarding the first n elements of the stream.
			All Intermediate operations are lazy, so they’re not executed until a result of a processing is actually needed.
		Following are Terminal operations:
			void	forEach(Consumer<? super T> action) - Performs an action for each element of this stream.
			forEachOrdered()
			Object[]	toArray() - Returns an array containing the elements of this stream.
			Optional<T>	reduce(BinaryOperator<T> accumulator) - Performs a reduction on the elements of this stream, using an associative accumulation function, and returns an Optional describing the reduced value, if any.
			<R,A> R	collect(Collector<? super T,A,R> collector) - Performs a mutable reduction operation on the elements of this stream using a Collector.
			min() - Returns the minimum element of this stream according to the provided Comparator.
			max() - Returns the maximum element of this stream according to the provided Comparator.
			count() - Returns the count of elements in this stream.
			boolean	anyMatch(Predicate<? super T> predicate) - checks if the predicate is true for any one element in the stream.
			boolean	allMatch(Predicate<? super T> predicate) - checks if the predicate is true for all the elements in the stream.
			boolean	noneMatch(Predicate<? super T> predicate) - checks if there are no elements matching the predicate. 
			Optional<T>	findFirst() - returns an Optional for the first entry in the stream; the Optional can, of course, be empty
			Optional<T> findAny() - Returns an Optional describing some element of the stream, or an empty Optional if the stream is empty
		Each of these operations will trigger execution of all intermediate operations.
		A reduction operation (also called as fold) takes a sequence of input elements and combines them into a single summary result by repeated application of a combining operation.
		Collectors (https://www.baeldung.com/java-8-collectors)
			Collectors.toList() ToList collector can be used for collecting all Stream elements into a List instance
			Collectors.toSet() ToSet collector can be used for collecting all Stream elements into a Set instance. 
			Collectors.toMap() ToMap collector can be used to collect Stream elements into a Map instance.
			Collectors.joining() Joining collector can be used for joining Stream<String> elements.
			
		The Java 8 Stream API Tutorial (https://www.baeldung.com/java-8-streams)
------------- 
	Primitive Type Streams in Java (https://howtodoinjava.com/java/stream/primitive-type-streams/)
			The stream API has inbuilt support for representing primitive streams using the following specialized classes. All these classes support the sequential and parallel aggregate operations on stream items.
				IntStream : represents sequence of primitive int-valued elements.
				LongStream : represents sequence of primitive long-valued elements.
				DoubleStream : represents sequence of primitive double-valued elements.
		All three classes, IntStream, LongStream and DoubleStream, consist of numerical values and it makes sense to provide built-in support for common aggregate operations on items of the stream.
			These classes provide the following methods for these operations. The return types are corresponding to the type of the stream. The following methods are from IntStream class:
				sum() – returns the sum of items in the stream.
				average() – returns an OptionalDouble describing the arithmetic mean of items of the stream.
				max() – returns an OptionalInt describing the maximum item of the stream.
				min() – returns an OptionalInt describing the mimimum item of the stream.
				count() – returns the count of items in the stream.
		Another way to find the above statistical data is by using the summaryStatistics() method that returns one of the following classes:
			IntSummaryStatistics
			LongSummaryStatistics
			DoubleSummaryStatistics
		Now we can use its methods to get the required value.
			getAverage()
			getCount()
			getMax()
			getMin()
			getSum()
				IntSummaryStatistics summary = IntStream.of(10, 18, 12, 70, 5).summaryStatistics();
				int max = summary.getMax();
		Using the boxed() method, we can convert a primitive stream to an object stream of the corresponding type.
			Stream<Integer> boxedStream1 = IntStream.of(1, 2, 3, 4, 5).boxed();
			Stream<Long> boxedStream = LongStream.of(1, 2, 3, 4, 5).boxed();
			Stream<Double> boxedStream2 = DoubleStream.of(1.0, 2.0, 3.0, 4.0, 5.0).boxed();
			
------------- StreamSupport (https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/stream/StreamSupport.html)
	This class is mostly for library writers presenting stream views of data structures; most static stream methods intended for end users are in the various Stream classes.
		static DoubleStream	doubleStream(Supplier<? extends Spliterator.OfDouble> supplier, int characteristics, boolean parallel)	- Creates a new sequential or parallel DoubleStream from a Supplier of Spliterator.OfDouble.
		intStream, longStream, stream

-- ------------------------------------------------ pros and cons of Java 8 Stream API (https://stackoverflow.com/questions/44180101/in-java-what-are-the-advantages-of-streams-over-loops)

			Streams are a more declarative style.
			Streams have a strong affinity with functions.
			Streams encourage less mutability
			Streams encourage looser coupling.
			Streams can succinctly express quite sophisticated behaviour.
			Streams provide scope for future efficiency gains. 
		Disadvantages
			Performance: A for loop through an array is extremely lightweight both in terms of heap and CPU usage. 
			If raw speed and memory thriftiness is a priority, using a stream is worse.
			Debuggers are improving, but even now, when you're stepping through stream code in a debugger, it can be harder work than the equivalent loop, 
				because a simple loop is very close to the variables and code locations that a traditional debugger works with.
			
-- ------------------------------------------------ Checked Exceptions and Streams (https://benjiweber.co.uk/blog/2014/03/22/checked-exceptions-and-streams/)

	Exception Handling Patterns
		There are also a couple of very common exception handling patterns which we can make more concise.

		Everything unchecked
			This approach involves wrapping all checked exceptions in runtime exceptions. 
			This can be useful in the case where we don’t have a good way to handle the checked exceptions thrown by code we are calling, nor is it important for anything higher up the callstack to handle them. 
			It is also useful if you don’t wish to use checked exceptions at all.

		Wrapping in domain specific exception
			Another common pattern is catching all exceptions that may occur at a lower layer in the application and wrapping them in a more meaningful exception to consumers of your code.

	SneakyThrow is a Java library to ignore checked exceptions.(https://github.com/rainerhahnekamp/sneakythrow) 

-- ------------------------------------------------ Java 14 Record Keyword (https://www.baeldung.com/java-record-keyword)
	In many cases, this data is immutable, since immutability ensures the validity of the data without synchronization.
		private, final field for each piece of data
		getter for each field
		public constructor with a corresponding argument for each field
		equals method that returns true for objects of the same class when all fields match
		hashCode method that returns the same value when all fields match
		toString method that includes the name of the class and the name of each field and its corresponding value

	
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
API для работы с датами (https://www.baeldung.com/java-8-date-time-intro)
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
	Тип Clock предоставляет доступ к текущей дате и времени.
	Часовые пояса представлены типом ZoneId.
	Тип LocalTime представляет собой время с учетом часового пояса, например, 10pm или 17:30:15.
	Тип LocalDate представляет конкретную дату, например, 2014-03-11
	Тип LocalDateTime представляет собой комбинацию даты и времени.
	
	The new Date and Time APIs introduced in Java 8 are immutable and thread safe.
	The new Date/Time APIs is ISO centric and follows consistent domain models for date, time, duration and periods. There are a wide variety of utility methods that support the commonest operations.
	new APIs, handling of timezone can be done with Local and ZonedDate/Time APIs.
	The LocalDate represents a date in ISO format (yyyy-MM-dd) without time.
	The LocalTime represents time without a date.
	The LocalDateTime is used to represent a combination of date and time.
	ZonedDateTime when we need to deal with time zone specific date and time. The ZoneId is an identifier used to represent different zones. 
		There are about 40 different time zones and the ZoneId are used to represent them as follows.
	The Period class is widely used to modify values of given a date or to obtain the difference between two dates.
	the Duration class is use to deal with Time. In the following code we create a LocalTime of 6:30 am and then add a duration of 30 seconds to make a LocalTime of 06:30:30am:
	Java 8 has added the toInstant() method which helps to convert existing Date and Calendar instance to new Date Time API as in the following code snippet:
		LocalDateTime.ofInstant(date.toInstant(), ZoneId.systemDefault());
		LocalDateTime.ofInstant(calendar.toInstant(), ZoneId.systemDefault());
	Java 8 provides APIs for the easy formatting of Date and Time:
	String localDateString = localDateTime.format(DateTimeFormatter.ISO_DATE);
	

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
new in Java 8
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	В Java 8 было добавлено много функций, наиболее значимые из них упомянуты ниже:
		Полноценная поддержка лямбда-выражений, которая добавляет функциональные возможности обработки данных для Java.
		Ключевое слово default в интерфейсах для поддержки функциональности по умолчанию(интерфейс может иметь реализацию метода по умолчанию).
		Ссылки на методы.
		Функциональные интерфейсы (предикаты, поставщики и т. д.)
		Потоки (stream) для работы с коллекциями
		Новое API для работы с датами
		Nashorn движок JavaScript, разрабатываемый полностью на Java компанией Oracle.


	Nashorn поставляется с cmd-утилитой jjs, которая позволяет исполнять JavaScript прямо в консоли. jjs принимает список JavaScript файлов исходного кода и запускает их. 
	Чтобы запустить файл давайте передадим его как аргумент в jjs: jjs leName.js



