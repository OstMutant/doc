
-- ------------------------------------------------ Java EE включає в себе стандарти наступних технологій:
Актуальна версія Java EE має номер 8.0
++ Веб-сервіс
++ Сервлет (javax.servlet и javax.servlet.http)
++ Java Server Pages
Enterprise JavaBean (javax.ejb.*)
J2EE Connector
Java Message Service (javax.jms.*)
Інтерфейс для обробки XML
Java Authorization Contract for Containers
JavaServer Faces (javax.faces.component.html)
++ Java Persistence API (javax.persistence)
++ JAX-RS Java API for RESTful Web Services (defined in JSR 311)

JTA(Java Transaction API) https://en.wikipedia.org/wiki/Java_Transaction_API

-- ------------------------------------------------ POJO (англ. Plain Old Java Object) 
„Простий старий Java-об'єкт“, простий Java-об'єкт, не успадкований від якогось специфічного об'єкта і який не реалізує жодних службових інтерфейсів окрім тих, які потрібні для бізнес-моделі.

-- ------------------------------------------------ What Are Microservices?(https://dzone.com/articles/java-microservices-code-examples-tutorials-and-more)
Microservices are a form of service-oriented architecture style (one of the most important skills for Java developers) wherein applications are built as a collection of different smaller services rather than one whole app. 
Instead of a monolithic app, you have several independent applications that can run on their own and may be created using different coding or programming languages. 
Big and complicated applications can be made up of simpler and independent programs that are executable by themselves. These smaller programs are grouped together to deliver all the functionalities of the big, monolithic app.

Seven micro-services architecture advantages http://eugenedvorkin.com/seven-micro-services-architecture-advantages/
Small, easy to understand code base.
Easy to scale.
Easy to throw away.
Easy to Deploy.
Ability to use a different technology stack.
System resilience

-- ------------------------------------------------ Жизненный цикл сервлета состоит из следующих шагов:
В случае отсутствия сервлета в контейнере.
Класс сервлета загружается контейнером.
Контейнер создает экземпляр класса сервлета.
Контейнер вызывает метод init(). Этот метод инициализирует сервлет и вызывается в первую очередь, до того, как сервлет сможет обслуживать запросы. За весь жизненный цикл метод init() вызывается только один раз.
Обслуживание клиентского запроса. Каждый запрос обрабатывается в своем отдельном потоке. Контейнер вызывает метод service() для каждого запроса. 
Этот метод определяет тип пришедшего запроса и распределяет его в соответствующий этому типу метод для обработки запроса.
 Разработчик сервлета должен предоставить реализацию для этих методов. Если поступил запрос, метод для которого не реализован, вызывается метод родительского класса и обычно завершается возвращением ошибки инициатору запроса.
В случае если контейнеру необходимо удалить сервлет, он вызывает метод destroy(), который снимает сервлет из эксплуатации. Подобно методу init(), этот метод тоже вызывается единожды за весь цикл сервлета.


Контейнер сервлетов  — программа, представляющая собой сервер, который занимается системной поддержкой сервлетов и обеспечивает их жизненный цикл в соответствии с правилами, определёнными в спецификациях.
 Может работать как полноценный самостоятельный веб-сервер, быть поставщиком страниц для другого веб-сервера, например Apache, или интегрироваться в Java EE сервер приложений.
 Обеспечивает обмен данными между сервлетом и клиентами, берёт на себя выполнение таких функций, как создание программной среды для функционирующего сервлета,
 идентификацию и авторизацию клиентов, организацию сессии для каждого из них.
http://www.w3processing.com/index.php?subMenuLoad=Servlet/Lifecycle.php&environmentPath=EC/WL
https://www.tutorialspoint.com/servlets/servlets-life-cycle.htm


The common gateway interface (CGI) is a standard way for a Web server to pass a Web user's request to an application program and to receive data back to forward to the user. 
It is part of the Web's Hypertext Transfer Protocol (HTTP).


Сессия - это сеанс между клиентом и сервером, устанавливаемая на определенное
время, за которое клиент может отправить на сервер сколько угодно запросов. Сеанс
устанавливается непосредственно между клиентом и веб-сервером в момент
получения первого запроса к веб-приложению. Каждый клиент устанавливает с
сервером свой собственный сеанс, который сохраняется до окончания работы с
приложением.


Существуют несколько распространенных способов управления сессией в сервлетах:
Аутентификация пользователя
HTML hidden eld
(скрытое поле)
Cookies
URL Rewriting
Session Management API




Cookie - это небольшие блоки текстовой информации, которые сервер посылает
клиенту для сохранения в файлах cookies. 

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
JSP : (https://www.journaldev.com/2110/jsp-interview-questions-and-answers?utm_source=website&utm_medium=menubar&utm_campaign=Top-Menu-Bar)
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	JSP stands for JavaServer Pages. JSP is java server side technology to create dynamic web pages. 
		JSP is extension of Servlet technology to help developers create dynamic pages with HTML like syntax.
		
	A server-side dynamic web page is a web page whose construction is controlled by an application server processing server-side scripts. (https://en.wikipedia.org/wiki/Dynamic_web_page)
		In server-side scripting, parameters determine how the assembly of every new web page proceeds, including the setting up of more client-side processing.

	What are the JSP lifecycle phases?
		1. Translation – JSP container checks the JSP page code and parse it to generate the servlet source code. 
		2. Compilation – JSP container compiles the jsp class source code and produce class file in this phase.
		3. Class Loading – Container loads the class into memory in this phase.
		4. Instantiation – Container invokes the no-args constructor of generated class to load it into memory and instantiate it.
		5. Initialization – Container invokes the init method of JSP class object and initializes the servlet config with init params configured in deployment descriptor. After this phase, JSP is ready to handle client requests. 
		6. Request Processing – This is the longest lifecycle of JSP page and JSP page processes the client requests. 
			The processing is multi-threaded and similar to servlets and for every request a new thread is spawned and ServletRequest and ServletResponse object is created and JSP service method is invoked.
		7. Destroy – This is the last phase of JSP lifecycle where JSP class is unloaded from memory. Usually it happens when application is undeployed or the server is shut down.
		
	What are JSP lifecycle methods?
		1. jspInit(): This method is declared in JspPage and it’s implemented by JSP container implementations. This method is called once in the JSP lifecycle to initialize it with config params configured in deployment descriptor. 
			We can override this method using JSP declaration scripting element to initialize any resources that we want to use in JSP page.
		2. _jspService(): This is the JSP method that gets invoked by JSP container for each client request by passing request and response object. 
			Notice that method name starts with underscore to distinguish it from other lifecycle methods because we can’t override this method. 
			All the JSP code goes inside this method and it’s overridden by default. We should not try to override it using JSP declaration scripting element. This method is defined in HttpJspPage interface.
		3. jspDestroy(): This method is called by container when JSP is unloaded from memory such as shutting down application or container. 
			This method is called only once in JSP lifecycle and we should override this method to release any resources created in JSP init method.
	
	Мы можем переопределить jspInit() и jspDestroy() методы с помощью использования скриптов JSP. Метод jspInit() переопределяется для создания общих ресурсов,
		которые мы хотели бы использовать в методе обслуживания JSP, а jspDestroy() метод переопределяется, чтобы освободить общие ресурсы на фазе уничтожения
	_jspService() - этот JSP метод внедряется JSP контейнером для каждого запроса клиента с помощью передачи объекта запроса и ответа. 
		Отметьте, что имя метода начинается с нижнего подчеркивания и отличается от других методов жизненного цикла тем, что его невозможно переопределить. 
		Весь JSP код проходит через этот метод и он переопределен по умолчанию. 

	Scriptlets, Expression and Declaration are scripting elements in JSP page using which we can add java code in the JSP pages.
		A scriptlet tag starts with <% and ends with %>. Any code written inside the scriptlet tags go into the _jspService() method.
		JSP Expression starts with <%= and ends with %>. <% out.print("Pankaj"); %> can be written using JSP Expression as <%= "Pankaj" %>
		JSP Declarations are used to declare member methods and variables of servlet class. JSP Declarations starts with <%! and ends with %>.
	
	JSP pages provide two types of comments that we can use:
		1. HTML Comments: Since JSP pages are like HTML, we can use HTML comments like <-- HTML Comment -->. These comments are sent to client also and we can see it in HTML source. 
		2. JSP Comments: JSP Comments are written using scriptlets like <%-- JSP Comment --%>. These comments are present in the generated servlet source code and doesn’t sent to client.
		
	JSP action elements or action tags are HTML like tags that provide useful functionalities such as working with Java Bean, including a resource, forwarding the request and to generate dynamic XML elements. 
		JSP action elements always starts with jsp: and we can use them in JSP page directly without the need to import any tag libraries or any other configuration changes. 
		Some of the important action elements are jsp:useBean, jsp:getProperty, jsp:setProperty, jsp:include and jsp:forward.
		
	JSP implicit objects are created by container while translating JSP page to Servlet source to help developers. 
		We can use these objects directly in scriptlets that goes in service method, however we can’t use them in JSP Declaration because that code will go at class level.
	
	JSP Standard Tag Library or JSTL is more versatile than JSP EL or Action elements because we can loop through a collection or escape HTML tags to show them like text in response.
	
	What is JSP Tags ?

	Tags in JSP are like the HTML tags. These tags are used for doing specific tasks in a JSP page. (https://www.roseindia.net/jsp/jsp-tags.shtml)
		Each tag has its own functionality. Tags in JSP, like the HTML tags, are written within the characters '<' and '>' however, different types of tags uses additional characters within '<' and '>' characters.
	


-- ------------------------------------------------ Enterprise Java Bean : https://www.javatpoint.com/ejb-interview-questions
-- Types of Enterprise Java Bean
There are 3 types of enterprise bean in java.
Session bean contains business logic that can be invoked by local, remote or webservice client.
Message Driven Bean Like Session Bean, it contains the business logic but it is invoked by passing message.
Entity Bean It encapsulates the state that can be persisted in the database. It is deprecated. Now, it is replaced with JPA (Java Persistent API).
Types of Session Bean


-- There are 3 types of session bean.
1) Stateless Session Bean: It doesn't maintain state of a client between multiple method calls.
Stateless Session bean is a business object that represents business logic only. It doesn't have state (data).
In other words, conversational state between multiple method calls is not maintained by the container in case of stateless session bean.
The stateless bean objects are pooled by the EJB container to service the request on demand.
It can be accessed by one client at a time. In case of concurrent access, EJB container routes each request to different instance.
There are 3 important annotations used in stateless session bean:
@Stateless @PostConstruct @PreDestroy
2) Stateful Session Bean: It maintains state of a client across multiple requests.Stateful Session bean is a business object that represents business logic like stateless session bean. But, it maintains state (data).
In other words, conversational state between multiple method calls is maintained by the container in stateful session bean.
There are 5 important annotations used in stateful session bean:
@Stateful @PostConstruct @PreDestroy @PrePassivate @PostActivate
3) Singleton Session Bean: One instance per application, it is shared between clients and supports concurrent access.


-- What is JMS?
Generally, user sends message to application. But, if we want to send message from one application to another, we need to use JMS API.
What are the advantages of JMS? Asynchronous Reliable
There are two types of messaging domains in JMS.
Point-to-Point Messaging Domain
In PTP model, one message is delivered to one receiver only. Here, Queue is used as a message oriented middleware (MOM).
The Queue is responsible to hold the message until receiver is ready.
Publisher/Subscriber Messaging Domain
In Pub/Sub model, one message is delivered to all the subscribers. It is like broadcasting. Here, Topic is used as a message oriented middleware that is responsible to hold and deliver messages.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Асинхронное программирование Java (https://www.youtube.com/watch?v=yBF9VRiGkik)
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		Аннотация @Asynchronous появилась с выходом платформы Jаvа ЕЕ 6 и предоставила удобную возможность реализации асинхронного выполнения метода.
		Asynchronous Computation in Java (http://www.baeldung.com/java-completablefuture)
			Asynchronous computation is difficult to reason about. Usually we want to think of any computation as a series of steps. 
			But in case of asynchronous computation, actions represented as callbacks tend to be either scattered across the code or deeply nested inside each other. 
			Things get even worse when we need to handle errors that might occur during one of the steps.

			The Future interface was added in Java 5 to serve as a result of an asynchronous computation, but it did not have any methods to combine these computations or handle possible errors.

			In Java 8, the CompletableFuture class was introduced. Along with the Future interface, it also implemented the CompletionStage interface. 
			This interface defines the contract for an asynchronous computation step that can be combined with other steps.

			CompletableFuture is at the same time a building block and a framework with about 50 different methods for composing, combining, executing asynchronous computation steps and handling errors.
			
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
JMS(https://docs.oracle.com/javaee/6/tutorial/doc/bncdx.html)
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	JMS API Architecture
		A JMS provider is a messaging system that implements the JMS interfaces and provides administrative and control features. An implementation of the Java EE platform includes a JMS provider.
		JMS clients are the programs or components, written in the Java programming language, that produce and consume messages. Any Java EE application component can act as a JMS client.
		Messages are the objects that communicate information between JMS clients.
		Administered objects are preconfigured JMS objects created by an administrator for the use of clients. 
			The two kinds of JMS administered objects are destinations and connection factories, described in JMS Administered Objects.
			
	Point-to-Point Messaging Domain
		Each message has only one consumer.
		A sender and a receiver of a message have no timing dependencies. The receiver can fetch the message whether or not it was running when the client sent the message.
		The receiver acknowledges the successful processing of a message.
		
	Publish/Subscribe Messaging Domain
		In a publish/subscribe (pub/sub) product or application, clients address messages to a topic, which functions somewhat like a bulletin board. 
			Publishers and subscribers are generally anonymous and can dynamically publish or subscribe to the content hierarchy. 
			The system takes care of distributing the messages arriving from a topic’s multiple publishers to its multiple subscribers. 
			Topics retain messages only as long as it takes to distribute them to current subscribers.
		Pub/sub messaging has the following characteristics.
			Each message can have multiple consumers.
			Publishers and subscribers have a timing dependency. A client that subscribes to a topic can consume only messages published after the client has created a subscription, 
				and the subscriber must continue to be active in order for it to consume messages.
	Message Consumption
		Messaging products are inherently asynchronous: There is no fundamental timing dependency between the production and the consumption of a message. 
			However, the JMS specification uses this term in a more precise sense. Messages can be consumed in either of two ways:
			Synchronously: A subscriber or a receiver explicitly fetches the message from the destination by calling the receive method. 
				The receive method can block until a message arrives or can time out if a message does not arrive within a specified time limit.
			Asynchronously: A client can register a message listener with a consumer. 
				A message listener is similar to an event listener. Whenever a message arrives at the destination, the JMS provider delivers the message by calling the listener’s onMessage method,
					which acts on the contents of the message.
					
	Message-Oriented Middleware (MOM) – это, грубо говоря, тот продукт, на основе которого и строится Messaging System.(http://www.javable.com/columns/serv_side/workshop/14/)
	Существует две "основных" модели обмена сообщениями:
		point-to-point
		publish-subscribe (pub-sub)
	Point-to-point модель применяется, когда одному или нескольким компонентам (так называемые senders) необходимо посать сообщение одному компоненту-адресату (receiver).
	Publish-subscribe модель применима, когда одному или нескольким компонентам (publishers) необходимо послать сообщение одному или нескольким компонентам-адресатам (subscribers). Данная модель основана на понятии message topic.

	Java Message Service (JMS) – это Java API (то есть набор интерфейсов и классов) для работы с Message-Oriented Middleware. Данный набор определен в пакете javax.jms в дереве пакетов J2EE.
		ConnectionFactory – это, как нетрудно догадаться из названия, обьект, ответственный за создание JMS Connection. 
			Администратор МОМ создает данный обьект и связывает его с деревом JNDI, так что клиент JMS может получить доступ к ConnectionFactory используя стандартный JNDI lookup-механизм. 
			В случае point-to-point модели используется javax.jms.QueueConnectionFactory, в случае pub-sub модели – javax.jms.TopicConnectionFactory.
		Connection – абстрактное представление реального соединения между клиентом JMS и MOM. В случае point-to-point модели используется javax.jms.QueueConnection, в случае pub-sub модели – javax.jms.TopicConnection.
		Session – обьект, создаваемый JMS Connection и используемый клиентами для посылки и принятия сообщений. В случае point-to-point используется javax.jms.QueueSession, в случае pub-sub – javax.jms.TopicSession. 
			Фактически, это главная "рабочая лошадка" JMS.
		Destination – это либо queue, либо topic – в зависимости от используемой модели: javax.jms.Queue или javax.jms.Topic. Как и ConnectionFactory, destination связывается с деревом JNDI.
		MessageProducer – обьект, который, собственно, и посылает сообщения. В случае point-to-point модели это javax.jms.QueueSender, в случае pub-sub – javax.jms.TopicPublisher.
		MessageConsumer – обьект, принимающий сообщения. В случае point-to-point модели это javax.jms.QueueReceiver, в случае pub-sub – javax.jms.TopicSubscriber.
		Message– сообщение. О типах сообщений будет сказано ниже.
		
	Существует два пути получения сообщений. 
		Первый – синхронное затребование сообщений из queue, используя метод receive() интерфейса javax.jms.QueueReceiver. 
		Второй – асинхронное получение сообщений как только они становятся доступны – используя интерфейс javax.jms.MessageListener.
	Pub-sub модель кажется более элегантной, и у разработчика может возникнуть желание строить все Messaging Systems на основе этой модели. 
		Но следует знать, что многие pub-subсистемы не гарантируют доставку сообщений в том порядке, в каком они были посланы (в отличие от point-to-point, где queueреализует принцип first-in/first-out).  
		Задача сохранения порядка следования сообщений не тривиальна даже в случае одного topic. А уж если необходимо сохранение порядка доставки сообщений в случае множественных topics – то сложность возрастает экспоненциально. 
		Поэтому в случае pub-sub модели следует по возможности избегать ситуаций, когда порядок следования сообщений важен (либо используя заголовки и раздел свойств сообщений для синхронизации – об этом будет сказано ниже).
	
	Типы сообщений
		В JMX определены следующие стандартные типы сообщений:
		StreamMessage – сообщение, содержащее сериализованный поток обьектов
		MapMessage – сообщение, содержащее пары "ключ-значение"
		TextMessage – сообщение, содержащее строку
		ObjectMessage– сообщение, содержащее сериализованный обьект
		ByteMessage – сообщение, содержащее поток байтов
		XMLMessage – расширение TextMessage, используется для доставки XMLсообщений
		Все типы сообщений являются подклассами javax.jms.Message.
	Заголовки и разделы свойств сообщений
		Сообщения соостоят из трех частей: заголовка сообщения, раздела свойств и собственно тела сообщения.
		JMSDestination – содержит имя destination, в который посылается сообщение.
		JMSDeliveryMode – определяет, является ли сообщение сохраняемым или нет. Если оно сохраняемо, то будет сохранено MOM в базе данных (или в файле), а потому оно переживет "гибель" системы, в отличие от несохраняемого сообщения.
		JMSExpiration – определяет, когда сообщение устареет и будет удалено из системы. По умолчанию сообщение не устаревает никогда.
		JMSPriority – как и следует из названия, определяет приоритет сообщения (от 0 до 9). По умолчанию равно 4.
		JMSMessageID – уникальный идентификатор сообщения
		JMSTimestamp – содержит информацию, когда именно MOM приняла сообщение от producer.
		JMSCorrelationID – может быть использовано разработчиком для согласования сообщений: например, если вы хотите переслать ряд сообщений, обьединенных в одну логическую группу (такую как набор товаров в заказе, при этом в каждое сообщение о товаре вы можете добавить в данное поле заголовка номер заказа).
		JMSReplyTo – может быть использовано разработчиком для того, чтобы consumer знал, кому (то есть в какой destination) при желании отсылать ответ.
		JMSType – поле может быть использовано разработчиком для того, чтобы дать приложению информацию, как обращаться с данным сообщением. Тип здесь понимается как application-specific type, а не тот, что использован выше в разделе "типы сообщений".
		JMSRedelivered – устанавливается, если сообщение не было доставлено с первой попытки – например, в случае, когда consumer не подтвердил получение сообщения (если он должен был подтвердить, конечно)
		Раздел свойств содержит пары "ключ-значение", которые могут быть использованы для пересылки определенных данных между producer и consumer. 
			В качестве значений могут быть использованы примитивные типы (boolean, byte, float, double, short, int, long), а так же строки (java.lang.String).
		Устанавливаются и читаются они с помощью соответствующих set и getметодов. Например, для установки integer-свойства с ключом "MyProperty"  и значением равным 100:
			textMessage.setIntProperty("MyProperty", 100);
			Для чтения:
			int value = textMessage.getIntProperty("MyProperty");
			
	Доставка сообщений
		Сообщение может быть сохраняемым или несохраняемым. Если сообщение сохраняемо, то MOM сохранит его в базе данных или файле. 
			textMessage.setText("It's my message");
			sender.send(textMessage, DeliveryMode.NON_PERSISTENT,
			messagePriority, messageTimeToLive);
			
	Подтверждение получения сообщения
		JMS поддерживает три "основных" модели подтверждения получения сообщения.
			AUTO_ACKNOWLEDGE – в случае синхронного получения сообщений, подтверждение получения будет произведено автоматически, когда метод receive() возвратит значение не вызвав никакой исключительной ситуации. 
				В случае асинхронного получения сообщений, подтверждение получения будет произведено, когда метод onMessage() вернет значение.
			DUPS_OK_ACKNOWLEDGE – работа по подтверждению получения сообщения перекладывается на Session. Сообщения будут вновь доставлены в случае возникновения ошибки или "гибели" системы.
			CLIENT_ACKNOWLEDGE – клиент должен вызвать метод acknowledge() интерфейса javax.jms.Message для того, чтобы явно подтвердить получение сообщения. 
				При вызове данного метода будет подтверждено получение текущего и всех предидущих полученных сообщений.
				
	Посылка сообщений как часть транзакции
		Существует два подхода в использовании транзакций совместно с JMS. 
		Первый подход заключается в использовании transacted sessions.
			Session session = con.createQueueSession(
				true,Session.AUTO_ACKNOWLEDGE);
		Второй подход заключается в использовании JTA-транзакций совместно с JMS.  Этот подход позволяет разработчику включать в единую транзакцию как посылку сообщений, так и запрос к базе данных или EJB.
			UserTransaction myTransaction =
				(UserTransaction)ctx.lookup("MyUserTransaction");
				myTransaction.begin();
				sender.send(textMessage);
				myStatement.executeUpdate(
				"INSERT INTO testTable VALUES (100,'BILL')");
				myTransaction.commit();
		При этом важно отметить, что JTA не может быть использован совместно с transacted session. Либо пироги, либо пряники. 
			Если Вы попытаетесь совместить несовместимое, то увидите, что transacted session будет игнорировать вызовы commit() или rollback() интерфейса UserTransaction.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
JTA(https://en.wikipedia.org/wiki/Java_Transaction_API)
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	The Java Transaction API (JTA), one of the Java Enterprise Edition (Java EE) APIs, enables distributed transactions to be done across multiple X/Open XA resources in a Java environment.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
RMI(https://www.javatpoint.com/RMI)
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	The RMI (Remote Method Invocation) is an API that provides a mechanism to create distributed application in java. The RMI allows an object to invoke methods on an object running in another JVM.
	The RMI provides remote communication between the applications using two objects stub and skeleton.
	RMI uses stub and skeleton object for communication with the remote object.
	A remote object is an object whose method can be invoked from another JVM. Let's understand the stub and skeleton objects:
		The stub is an object, acts as a gateway for the client side. All the outgoing requests are routed through it. It resides at the client side and represents the remote object. 
			When the caller invokes method on the stub object, it does the following tasks:
			It initiates a connection with remote Virtual Machine (JVM),
			It writes and transmits (marshals) the parameters to the remote Virtual Machine (JVM),
			It waits for the result
			It reads (unmarshals) the return value or exception, and
			It finally, returns the value to the caller.
		The skeleton is an object, acts as a gateway for the server side object. All the incoming requests are routed through it. When the skeleton receives the incoming request, it does the following tasks:
			It reads the parameter for the remote method
			It invokes the method on the actual remote object, and
			It writes and transmits (marshals) the result to the caller.
	Understanding requirements for the distributed applications
		If any application performs these tasks, it can be distributed application.
			The application need to locate the remote method
			It need to provide the communication with the remote objects, and
			The application need to load the class definitions for the objects.