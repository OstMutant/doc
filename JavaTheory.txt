-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Реактивный манифест (https://afedyanin.wordpress.com/2015/12/17/reactive-manifesto/) 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

		Отзывчивыми (Responsive) — система своевременно реагирует на события.
		Устойчивыми (Resilient) — система остается отзывчивой в условиях сбоя
		Эластичными (Elastic) — система остается отзывчивой при различной рабочей нагрузке
		Ориентированными на обмен сообщениями (Message Driven)

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Programming paradigms (https://en.wikipedia.org/wiki/Programming_paradigm)
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
        Programming paradigms are a way to classify programming languages based on their features. Languages can be classified into multiple paradigms.(https://en.wikipedia.org/wiki/Object-oriented_programming)
 
		------------(https://en.wikipedia.org/wiki/Comparison_of_programming_paradigms)
		 Main paradigm approaches
				Imperative programming – defines computation as statements that change a program state.
				Procedural programming, structured programming – specifies the steps a program must take to reach a desired state.
				Declarative programming – defines program logic, but not detailed control flow.
				Functional programming – treats programs as evaluating mathematical functions and avoids state and mutable data
				Object-oriented programming (OOP) – organizes programs as objects: data structures consisting of datafields and methods together with their interactions.
				Event-driven programming – program control flow is determined by events, such as sensor inputs or user actions (mouse clicks, key presses) or messages from other programs or threads.
				Automata-based programming – a program, or part, is treated as a model of a finite state machine or any other formal automaton.
		-----------
		-- Object-oriented programming (OOP) is a programming paradigm based on the concept of "objects", which may contain data, in the form of fields, often known as attributes; and code, in the form of procedures, often known as methods.
 
        -- Declarative programming — a style of building the structure and elements of computer programs—that expresses the logic of a computation without describing its control flow.
                Computation is any type of calculation that includes both arithmetical and non-arithmetical steps and follows a well-defined model understood and described as, for example, an algorithm.
                Control flow (or flow of control) is the order in which individual statements, instructions or function calls of an imperative program are executed or evaluated. 
                The emphasis on explicit control flow distinguishes an imperative programming language from a declarative programming language.
                Common declarative languages include those of database query languages (e.g., SQL, XQuery), regular expressions, logic programming, functional programming, and configuration management systems.


        -- Imperative programming is a programming paradigm that uses statements that change a program's state. 
        In much the same way that the imperative mood in natural languages expresses commands, an imperative program consists of commands for the computer to perform. 
        Imperative programming focuses on describing how a program operates.
        
        A function represents a unique association between elements of a domain (the input set) to the elements of a codomain (the output set). 
				This means that applying the function to some input, you always get the same output.
        Functional programming is a programming paradigm—a style of building the structure and elements 
                of computer programs—that treats computation as the evaluation of mathematical functions and avoids changing-state and mutable data. 
                It is a declarative programming paradigm, which means programming is done with expressions or declarations instead of statements.
        (http://olejka-dev.info/funkcionalnoe-programmirovanie-2016-luis-atensio-chast-1-dumaj-funkcionalno/)
        Чистая функция, это функция, которая:
                является детерминированной;
                не обладает побочными эффектами.
        
                Функция является детерминированной, если для одного и того же набора входных значений она возвращает одинаковый результат.
                В императивных языках некоторые функции в процессе выполнения своих вычислений могут модифицировать значения глобальных переменных, 
                        осуществлять операции ввода-вывода, реагировать на исключительные ситуации, вызывая их обработчики. Такие функции называются функциями с побочными эффектами. 
                        Другим видом побочных эффектов является модификация переданных в функцию параметров (переменных), когда в процессе вычисления выходного значения функции изменяется и значение входного параметра.
        
        Pure function if both of the following statements about the function hold:
                The function always evaluates the same result value given the same argument value(s). 
                        The function result value cannot depend on any hidden information or state that may change while program execution proceeds or between different executions of the program,
                        nor can it depend on any external input from I/O devices (usually—see below).
                Evaluation of the result does not cause any semantically observable side effect or output, such as mutation of mutable objects or output to I/O devices (usually—see below).


        Referential transparency(Прозорість посилань) and referential opacity are properties of parts of computer programs. 
                An expression is said to be referentially transparent if it can be replaced with its corresponding value without changing the program's behavior.
                As a result, evaluating a referentially transparent function gives the same value for same arguments. 
                Such functions are called pure functions. An expression that is not referentially transparent is called referentially opaque.
        
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
Взаимосвязи объектов классов
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	Зависимость обозначает такое отношение между классами, что изменение спецификации класса-поставщика может повлиять на работу зависимого класса, но не наоборот.
	Ассоциация показывает, что объекты одной сущности (класса) связаны с объектами другой сущности таким образом, что можно перемещаться от объектов одного класса к другому. Является общим случаем композиции и агрегации.
	Агрегация — это разновидность ассоциации при отношении между целым и его частями. Как тип ассоциации агрегация может быть именованной. Одно отношение агрегации не может включать более двух классов (контейнер и содержимое).
		Агрегация встречается, когда один класс является коллекцией или контейнером других. 
		Причём по умолчанию, агрегацией называют агрегацию по ссылке, то есть когда время существования содержащихся классов не зависит от времени существования содержащего их класса. 
		Если контейнер будет уничтожен, то его содержимое — нет.
		Графически агрегация представляется пустым ромбом на блоке класса, и линией, идущей от этого ромба к содержащемуся классу.
	Композиция
		Композиция — более строгий вариант агрегации. Известна также как агрегация по значению.
		Композиция имеет жёсткую зависимость времени существования экземпляров класса контейнера и экземпляров содержащихся классов. Если контейнер будет уничтожен, то всё его содержимое будет также уничтожено.
		Графически представляется как и агрегация, но с закрашенным ромбиком.
		
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
REST https://uk.wikipedia.org/wiki/REST(https://restfulapi.net/rest-architectural-constraints/, https://restfulapi.net/idempotent-rest-apis/,
https://devcenter.heroku.com/articles/increasing-application-performance-with-http-cache-headers#expires, 
https://devcenter.heroku.com/articles/jax-rs-http-caching, 
https://docs.oracle.com/cd/E19798-01/821-1841/6nmq2cp1v/index.html)
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        REST (скор. англ. Representational State Transfer, «передача репрезентативного стану») 
        Дані повинні передаватися у вигляді невеликої кількості стандартних форматів (наприклад, HTML, XML, JSON). 
		Компоненти REST системи спілкуються передаючи один одному представлення ресурсу в форматі що обирається з оновлюваного набору стандартних форматів даних.
			Формат обирається динамічно відповідно до бажань компонента-клієнта і можливостей сервера.
        Будь-який REST протокол (HTTP в тому числі) повинен підтримувати кешування, не повинен залежати від мережевого прошарку, не повинен зберігати інформації про стан між парами «запит-відповідь».
        Ресурс — це ключовий елемент даних в REST. Ресурсом може бути що завгодно що можна назвати: якийсь документ
		Контрольні дані в представленні описують ціль повідомлення між компонентами, наприклад прохання про дію (створити, змінити видалити ресурс),
			або значення відповіді (наприклад поточний стан ресурсу, чи значення якогось іншого ресурсу, наприклад опис помилки).
        Для того, щоб посилатись на ресурси, використовуються ідентифікатори ресурсів.
        Представлення (англ. representation) — це послідовність байтів та метадані представлення, для того щоб описати ці байти. Часто, представлення називають документом, файлом, повідомленням HTTP
        Конектори надають інтерфейс для комунікації компонентів, приховуючи реалізації ресурсів та механізм комунікації.


                GET - отримати представлення ресурсу
                DELETE - знищити ресурс
                POST - створити новий ресурс на місці даного використавши передане представлення
                PUT - замінити стан поточного ресурсу станом що описується переданим представленням
        Ці використовуються щоб дослідити API:
                HEAD - отримати заголовки які б відсилались разом з представленням цього ресурсу, але не саме представлення.
                OPTIONS - визначити список методів на які цей ресурс відповідає.
                
				CONNECT та TRACE використовуються лише для HTTP проксі
        
				PATCH - змінити лише частину цього ресурсу на основі даного представлення. Якщо якась частина ресурсу не згадується в переданому представленні - не чіпати її. 
				
        Методи GET, PUT та DELETE ідемпотентні, що означає що незалежно від того скільки разів ви виконаєте операцію яку вини просять - ви отримуєте той самий результат.
        POST - не ідемпотентний, тобто відправивши POST на створення повідомлення кілька разів, ви отримаєте кілька повідомлень.

	--(https://en.wikipedia.org/wiki/Representational_state_transfer)
		REpresentational State Transfer (REST), or RESTful, web services provide interoperability between computer systems on the Internet. 
			REST-compliant web services allow the requesting systems to access and manipulate textual representations of web resources by using a uniform and predefined set of stateless operations.
		
        Java API for RESTful Web Services (JAX-RS (defined in JSR 311)), is a set if APIs to developer REST service. JAX-RS is part of the Java EE6, and make developers to develop REST web application easily.


-- REST Architectural Constraints
        -- Uniform interface
                All resources should be accessible through a common approach such as HTTP GET, and similarly modified using consistent approach.
        -- Client–server
                Client application and server application MUST be able to evolve separately without any dependency on each other. Client should know only resource URIs and that’s all. 
        -- Stateless
                Make all client-server interaction stateless. Server will not store anything about latest HTTP request client made. It will treat each and every request as new. No session, no history.
        -- Cacheable
                Caching shall be applied on resources when applicable and then these resources MUST declare themselves cacheable. Caching can be implemented on server or client side.
        -- Layered system
                REST allow you to use a layered system architecture where you deploy the APIs on server A, and store data on server B and authenticate requests in Server C, for example.
        -- Code on demand (optional)
                Well, this constraint is optional. Most of the time you will be sending the static representations of resources in form of XML or JSON. 
                But when you need to, you are free to return executable code to support a part of your application e.g. clients may call your API to get a UI widget rendering code.

-- Uniform interface (https://en.wikipedia.org/wiki/Representational_state_transfer, https://habrahabr.ru/post/319984/)
		The uniform interface constraint is fundamental to the design of any REST service. It simplifies and decouples the architecture, which enables each part to evolve independently.
			The four constraints for this uniform interface are:

		Resource identification in requests
			Individual resources are identified in requests, for example using URIs in Web-based REST systems. The resources themselves are conceptually separate from the representations that are returned to the client. 
			For example, the server may send data from its database as HTML, XML or JSON, none of which are the server's internal representation.
		Resource manipulation through representations
			When a client holds a representation of a resource, including any metadata attached, it has enough information to modify or delete the resource.
		Self-descriptive messages
			Each message includes enough information to describe how to process the message. For example, which parser to invoke may be specified by an Internet media type (previously known as a MIME type).[2]
		Hypermedia as the engine of application state (HATEOAS)
			Having accessed an initial URI for the REST application—analogous to a human Web user accessing the home page of a website—a REST client should then be able to use 
			server-provided links dynamically to discover all the available actions and resources it needs. As access proceeds, the server responds with text that includes hyperlinks to other actions that are currently available.
			There is no need for the client to be hard-coded with information regarding the structure or dynamics of the REST service.
			
-- Understanding Richardson REST maturity model (RMM)(https://blogs.sap.com/2017/08/13/understanding-richardson-rest-maturity-model/)
		The Richardson maturity model is separated in four (not so tough) levels
			Level 0 – RPC POX
				The farthest level of a RESTful API and there is no standard type used here. 
				Resources are not well defined, and are being used only to invoke remote mechanisms based on remote procedure call. 
				The exchange messages at this level can be serialized in XML, JSON, text, and other formats. This level does not make an API RESTful.
			Level 1 – Resources
				At this level, we will start using features as a way to model and organize the RESTful API. 
				Necessarily, we do not need to know the functionality attached in each method, but we should know how to identify resources.
			Level 2 – HTTP verbs
				On this moment, the HTTP verbs are begin to be used for which they were actually created. The most used verbs are GET, POST, PUT and DELETE.
			Level 3 – HATEOAS
				Also known as Hypermedia as the Engine of Application State, Roy Fielding describes HATEOAS as one of the necessary premises to consider an API as RESTful.
				Its main element is the hypermedia representation, allowing a document to describe its current state, and its relationship with other elements or future states. 
				Please, understand HATEOAS as the ability of a document to be relate with others.

		The Richardson maturity model(https://restfulapi.net/richardson-maturity-model/)
			Level Zero
				Level zero of maturity does not make use of any of URI, HTTP Methods, and HATEOAS capabilities.
				These services have a single URI and use a single HTTP method (typically POST). 
				For example, most Web Services (WS-*)-based services use a single URI to identify an endpoint, and HTTP POST to transfer SOAP-based payloads, effectively ignoring the rest of the HTTP verbs.
			Level One
				Level one of maturity makes use of URIs out of URI, HTTP Methods, and HATEOAS.
				These services employ many URIs but only a single HTTP verb – generally HTTP POST. 
				They give each individual resource in their universe a URI. Every resource is separately identified by a unique URI – and that makes them better than level zero.
			Level Two
				Level two of maturity makes use of URIs and HTTP out of URI, HTTP Methods, and HATEOAS.
				Level two services host numerous URI-addressable resources. Such services support several of the HTTP verbs on each exposed resource – Create, Read, Update and Delete (CRUD) services. 
				Here the state of resources, typically representing business entities, can be manipulated over the network.
			Level Three
				Level three of maturity makes use of all three i.e. URIs and HTTP and HATEOAS.
				This is the most mature level of Richardson’s model which encourages easy discoverability and makes it easy for the responses to be self-explanatory by using HATEOAS.
		
		Hypermedia, an extension of the term hypertext, is a nonlinear medium of information that includes graphics, audio, video, plain text and hyperlinks. (https://en.wikipedia.org/wiki/Hypermedia)
		Виклик віддалених процедур (англ. Remote procedure call, RPC) — протокол, що дозволяє програмі, запущеній на одному комп'ютері, звертатись до функцій (процедур) програми, що виконується на іншому комп'ютері,
			подібно до того, як програма звертається до власних локальних функцій.
		Remote Procedure Invocation(https://www.enterpriseintegrationpatterns.com/patterns/messaging/EncapsulatedSynchronousIntegration.html) applies the principle of encapsulation to integrating applications.
			If an application needs some information that is owned by another application, it asks that application directly. 
			If one application needs to modify the data of another, then it does so by making a call to the other application. Each application can maintain the integrity of the data it owns. 
			Furthermore, each application can alter its internal data without having every other application be affected.
		POX Plain Old XML(https://stackoverflow.com/questions/21554111/difference-between-rest-and-pox?answertab=active#tab-top)
		
		Do not confuse REST with RESTful
			There is a slightly difference between both REST and RESTful. The first one means about a set of best practices (Roy’s constraint), while RESTful is the implementation of those constraints in an API. 
			It means, when an API is constructed based on those constraints, it automatically becomes RESTful.
		
		Cons
			great flexibility
			lower maintenance costs
			high scalability
			simplicity
		
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SOAP https://ru.wikipedia.org/wiki/SOAP (от англ. Simple Object Access Protocol — простой протокол доступа к объектам) 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

		SOAP и веб-службы REST
		Существует много различий между веб-службами SOAP и REST. Ниже приведены важные 10 различий между SOAP и REST:
		SOAP - это протокол . REST - это архитектурный стиль.
		SOAP означает Простой протокол доступа к объектам. REST означает REpresentational State Transfer.
		SOAP не может использовать REST, потому что это протокол. REST может использовать веб-службы SOAP, потому что это концепция и может использовать любой протокол, такой как HTTP, SOAP.
		SOAP использует интерфейсы служб для раскрытия бизнес-логики. REST использует URI для раскрытия бизнес-логики.
		В Java JAX-WS используется Java-API для веб-сервисов SOAP. В Java JAX-RS - это API-интерфейс java для веб-служб RESTful.
		SOAP определяет стандарты, строго соблюдаемые. REST не определяет слишком много стандартов, таких как SOAP.
		SOAP требует больше полосы пропускания и ресурса, чем REST. REST требует меньше полосы пропускания и ресурса, чем SOAP.
		SOAP определяет собственную безопасность. Веб-службы RESTful наследуют меры безопасности от основного транспорта.
		SOAP разрешает только формат данных XML. REST позволяет использовать другой формат данных, например, обычный текст, HTML, XML, JSON и т.д.
		SOAP менее предпочтительный, чем REST. REST более предпочтительный, чем SOAP.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
web service (https://en.wikipedia.org/wiki/Web_service)
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------		
		In a web service, the Web technology such as HTTP—originally designed for human-to-machine communication—is utilized for machine-to-machine communication, 
			more specifically for transferring machine-readable file formats such as XML and JSON.	
	
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Greenfield/Brownfield (https://techterms.com/definition/greenfield, https://techterms.com/definition/brownfield)
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		
		In the IT world, greenfield describes a software project that is developed from scratch rather than built from an existing program.
		Brownfield is a construction term that describes previously developed land. In the IT industry, it refers to previously developed software. 
		Brownfield software development is software that is built from an existing program. It may be contrasted with "greenfield" development, which involves creating a software program from scratch.
		
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Functional vs Non Functional Requirements (https://reqtest.com/requirements-blog/functional-vs-non-functional-requirements/)
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		
		The official definition of ‘a functional requirement’ is that it essentially specifies something the system should do.
		Some of the more typical functional requirements include:
			Business Rules
			Transaction corrections, adjustments and cancellations
			Administrative functions
			Authentication
			Authorization levels
			Audit Tracking
			External Interfaces
			Certification Requirements
			Reporting Requirements
			Historical Data
			Legal or Regulatory Requirements
		
		Simply put, the difference is that non-functional requirements describe how the system works, while functional requirements describe what the system should do.
		Some typical non-functional requirements are:
			Performance – for example Response Time, Throughput, Utilization, Static Volumetric
			Scalability
			Capacity
			Availability
			Reliability
			Recoverability
			Maintainability
			Serviceability
			Security
			Regulatory
			Manageability
			Environmental
			Data Integrity
			Usability
			Interoperability

			
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
KISS principle(https://en.wikipedia.org/wiki/KISS_principle) (keep it small and simple) 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		The KISS principle states that most systems work best if they are kept simple rather than made complicated; 
			therefore simplicity should be a key goal in design, and that unnecessary complexity should be avoided.

			
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
YAGNI principle(https://en.wikipedia.org/wiki/KISS_principle) (You aren't gonna need it) 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		"You aren't gonna need it"[1][2] (YAGNI)[3] is a principle of extreme programming (XP) that states a programmer should not add functionality until deemed necessary.[4] 
			XP co-founder Ron Jeffries has written: "Always implement things when you actually need them, never when you just foresee that you need them."[5] 
			Other forms of the phrase include "You aren't going to need it"[6][7] and "You ain't gonna need it"

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
DRY principle(https://en.wikipedia.org/wiki/Don%27t_repeat_yourself) (Don't repeat yourself) 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		In software engineering, don't repeat yourself (DRY) is a principle of software development aimed at reducing repetition of software patterns[1], 
			replacing it with abstractions or using data normalization to avoid redundancy.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SOLID (об'єктно-орієнтоване програмування) https://en.wikipedia.org/wiki/SOLID_(object-oriented_design)
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        S        SRP         Принцип єдиного обов'язку (Single responsibility principle) Кожен об'єкт має виконувати лише один обов'язок.
				a class should have only a single responsibility (i.e. changes to only one part of the software's specification should be able to affect the specification of the class).
        O        OCP         Принцип відкритості/закритості (Open/closed principle) Програмні сутності повинні бути відкритими для розширення, але закритими для змін. 
                Розширення певного класу/інтерфейсу може здійснюватись через його успадкування.
				"software entities … should be open for extension, but closed for modification."
        L        LSP         Принцип підстановки Лісков (Liskov substitution principle) Об'єкти в програмі можуть бути заміненими їх нащадками без зміни коду програми.
				"objects in a program should be replaceable with instances of their subtypes without altering the correctness of that program." See also design by contract.
        I        ISP         Принцип розділення інтерфейсу (Interface segregation principle) Багато спеціалізованих інтерфейсів краще за один універсальний. 
                Інтерфейс може бути поділений на спеціалізовані ще на стадії проектування, заради майбутньої гнучкості програмних компонентів.
				"many client-specific interfaces are better than one general-purpose interface."[4]
        D        DIP         Принцип інверсії залежностей (Dependency inversion principle) Залежності всередині системи будуються на основі абстракцій, що не повинні залежати від деталей; 
                навпаки, деталі мають залежати від абстракцій. Модулі вищих рівнів не мають залежати від модулів нижчих рівнів.
				one should "depend upon abstractions, [not] concretions."[4]
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Patterns GOF(Design Patterns: Elements of Reusable Object-Oriented Software)(Gang of Four)(http://www.javenue.info/post/design-patterns-java)
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	Creational Design Patterns
        Singleton Pattern
        Factory Pattern
        Abstract Factory Pattern
        Builder Pattern
        Prototype Pattern
	Structural Design Patterns
        Adapter Pattern
        Composite Pattern(https://dzone.com/articles/composite-design-pattern-java-0)
			Composite design patten allows you to have a tree structure and ask each node in the tree structure to perform a task.You can take real life example of a organization.
        Proxy Pattern
        Flyweight Pattern
        Facade Pattern
        Bridge Pattern
        Decorator Pattern
	Behavioral Design Patterns
        Template Method Pattern
        Mediator Pattern
        Chain of Responsibility Pattern
        Observer Pattern
        Strategy Pattern
        Command Pattern
        State Pattern
        Visitor Pattern
        Interpreter Pattern
        Iterator Pattern
        Memento Pattern

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Patterns GRASP(General Responsibility Assignment Software Patterns)(http://blogerator.org/page/oop-patterny-i-principy-grasp)
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		Information Expert (Информационные эксперт) ;
		Creator (Создатель) ;
		Controller (Контроллер) ;
		Low Coupling (Слабая связанность) ;
		High Cohesion (Высокая сцепленность) ;
		Pure Fabrication (Чистая выдумка или чистое синтезирование) ;
		Indirection (Посредник) ;
		Protected Variations (Сокрытие реализации или защищенные изменения) ;
		Polymorphism (Полиморфизм).
		
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Domain-specific language (DSL) (https://en.wikipedia.org/wiki/Domain-specific_language)
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		
		A domain-specific language (DSL) is a computer language specialized to a particular application domain.
			A domain is a field of study that defines a set of common requirements, terminology, and functionality for any software program constructed to solve a problem in the area of computer programming,
				known as domain engineering. The word domain is also taken as a synonym of application domain.[1] It is also seen as a sphere of knowledge.
		
-- ------------------------------------------------ Виды тестирования и подходы к их применению
Блочное (Unit testing) — тестирование одного модуля в изоляции.
Интеграционное (Integration Testing) — тестирование группы взаимодействующих модулей.
Системное (System Testing) — тестирование системы в целом.