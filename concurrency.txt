-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Threads
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		wait, notify, notifyAll (https://java2blog.com/difference-between-sleep-and-wait-in/, https://javarush.ru/quests/lectures/questmultithreading.level01.lecture06)
		synchronized(lockedObject) {   
			lockedObject.wait(); // It releases the lock on lockedObject.
				// So until we call notify() or notifyAll() from other thread,It will not wake up  
			}
			
		(sleep) https://javarush.ru/quests/lectures/questmultithreading.level01.lecture06
		synchronized(lockedObject) {   
			Thread.sleep(1000); // It does not release the lock on lockedObject.
			// So either after 1000 miliseconds, current thread will wake up, or after we call 
			//t. interrupt() method.
		}

		join() method allows one thread to wait for the completion of the other. (https://www.callicoder.com/java-multithreading-thread-and-runnable-tutorial/)
		
		Задача мьютекса — обеспечить такой механизм, чтобы доступ к объекту в определенное время был только у одного потока. (https://javarush.com/groups/posts/1994-sinkhronizacija-potokov-operator-synchronized)
		В чем разница между мьютексом, монитором и семафором (https://javarush.com/groups/posts/2174-v-chem-raznica-mezhdu-mjhjuteksom-monitorom-i-semaforom)
		Difference Between Mutex and Semaphore (https://ssiddique.info/difference-between-mutex-and-semaphore)
------------------- Java provides three ways to create a thread programmatically.
        Implementing the java.lang.Runnable interface.
        Extending the java.lang.Thread class.
        Implementing the java.util.concurrent.Callable interface.

------------------- Thread safety(https://www.journaldev.com/1061/thread-safety-in-java) 
		In java is the process to make our program safe to use in multithreaded environment, 
		There are different ways through which we can make our program thread safe.
			Synchronization is the easiest and most widely used tool for thread safety in java.
			Use of Atomic Wrapper classes from java.util.concurrent.atomic package. For example AtomicInteger
			Use of locks from java.util.concurrent.locks package.
			Using thread safe collection classes, check this post for usage of ConcurrentHashMap for thread safety.
			Using volatile keyword with variables to make every thread read the data from memory, not read from thread cache.
			
------------------- Understanding Deadlock, Livelock and Starvation with Code Examples in Java(http://www.codejava.net/java-core/concurrency/understanding-deadlock-livelock-and-starvation-with-code-examples-in-java)
		Understanding Deadlock
			Deadlock describes a situation where two more threads are blocked because of waiting for each other forever. 
		Understanding Livelock
			Livelock describes situation where two threads are busy responding to actions of each other. They keep repeating a particular code so the program is unable to make further progress:
				Thread 1 acts as a response to action of thread 2
				Thread 2 acts as a response to action of thread 1
			Unlike deadlock, threads are not blocked when livelock occurs.
		Understanding Starvation
			Starvation describes a situation where a greedy thread holds a resource for a long time so other threads are blocked forever.
	
		- Deadlock:  All threads are blocked, the program hangs forever.
		- Livelock: No threads blocked but they run into infinite loops. The program is still running but unable to make further progress.
		- Starvation: Only one thread is running, and other threads are waiting forever.
		
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		Multithreading Costs(http://tutorials.jenkov.com/java-concurrency/costs.html)
			"context switch" - When a CPU switches from executing one thread to executing another, the CPU needs to save the local data, program pointer etc.
				of the current thread, and load the local data, program pointer etc. of the next thread to execute. 
		
		Concurrency vs. Parallelism (http://tutorials.jenkov.com/java-concurrency/concurrency-vs-parallelism.html)
			Parallelism means that an application splits its tasks up into smaller subtasks which can be processed in parallel, for instance on multiple CPUs at the exact same time.
			Concurrency means that an application is making progress on more than one task at the same time (concurrently).
			
		У сучасній Java-розробці ви, як правило, проектуєте для Concurrency (розбиваючи програму на незалежні задачі, які можуть виконуватися асинхронно та безпечно працювати зі спільними даними). 
			А потім, якщо доступно апаратне забезпечення з кількома ядрами, ви отримуєте Parallelism як побічний продукт цього concurrent-дизайну, що прискорює виконання ваших завдань. 
			Java надає багатий набір інструментів для реалізації обох концепцій.
		
========================================================================================
		Optimistic Locking—підхід, коли потоки працюють із даними без блокування і перевіряють, чи дані не змінилися перед збереженням. 
			Якщо дані змінилися, потік має повторити операцію. Використовується, коли конфлікти рідкісні, і дозволяє уникнути зайвого блокування.

		Pessimistic Locking—підхід, коли потік блокує ресурс перед його зміною, гарантуючи, що ніхто інший його не змінить. 
			Використовується, коли конфлікти є ймовірними і потрібен строгий контроль доступу.
		
		
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		StampedLock vs ReentrantLock vs ReadWriteLock (https://javagyansite.com/2023/06/26/stampedlock-vs-reentrantlock-vs-readwritelock/, https://flex4java.blogspot.com/2015/02/lock-reentrantlock-reentrantreadwritelo.html)
		
		StampedLock 
			Writing. Method writeLock() possibly blocks waiting for exclusive access, returning a stamp that can be used in method unlockWrite(long) to release the lock. Untimed and timed versions of tryWriteLock are also provided.
			When the lock is held in write mode, no read locks may be obtained, and all optimistic read validations will fail.
			Reading. Method readLock() possibly blocks waiting for non-exclusive access, returning a stamp that can be used in method unlockRead(long) to release the lock. Untimed and timed versions of tryReadLock are also provided.
			Optimistic Reading. Method tryOptimisticRead() returns a non-zero stamp only if the lock is not currently held in write mode. 
				Method validate(long) returns true if the lock has not been acquired in write mode since obtaining a given stamp. 
				This mode can be thought of as an extremely weak version of a read-lock, that can be broken by a writer at any time. 
				The use of optimistic mode for short read-only code segments often reduces contention and improves throughput. 
				However, its use is inherently fragile. Optimistic read sections should only read fields and hold them in local variables for later use after validation. 
			
		Механізми реалізації в Java:
		(Pessimistic Locking) Ключове слово synchronized: Найпростіший і найпоширеніший спосіб. Можна синхронізувати метод або блок коду.
		class Counter {
			private int count = 0;
			public synchronized void increment() { // Метод заблоковано
				count++;
			}
			public void decrement() {
				synchronized (this) { // Блок коду заблоковано на об'єкті 'this'
					count--;
				}
			}
		}
		Коли потік входить у синхронізований метод або блок, він отримує моніторний лок на об'єкт. Жоден інший потік не може отримати той самий лок, доки перший потік його не звільнить.

		(Pessimistic Locking) Явні локи (Explicit Locks) з java.util.concurrent.locks.ReentrantLock: Більш гнучкий та потужний механізм, ніж synchronized. Дозволяє:
		Спробувати отримати лок (tryLock())
		Отримати лок з таймаутом
		Отримати лок з можливістю переривання
		Керувати чергою потоків, що чекають
		import java.util.concurrent.locks.ReentrantLock;
		class SafeCounter {
			private int count = 0;
			private final ReentrantLock lock = new ReentrantLock();
			public void increment() {
				lock.lock(); // Отримуємо лок
				try {
					count++;
				} finally {
					lock.unlock(); // Завжди звільняємо лок
				}
			}
		}
		
		Блокування запису в StampedLock (для read-write сценаріїв): Хоча StampedLock є гібридним (дозволяє оптимістичне читання), його write-lock (блок запису) є песимістичним.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		Atomic variables come with several benefits(https://andreibaptista.medium.com/taming-concurrency-understanding-atomic-variables-in-java-dc296424dd5d,
		 https://ioflood.com/blog/java-volatile/, https://javarush.com/groups/posts/4151-kofe-breyk-240-chto-takoe-atomarnihe-peremennihe-v-java-intellij-idea-poleznihe-priemih-i-plagi, 
		 https://itsobes.ru/JavaSobes/kak-ustroeny-atomiki/)
			1. Performance: Atomic variables are more efficient than synchronized blocks or methods. 
				This is because they rely on hardware-level support for atomicity (e.g., compare-and-swap (CAS) instructions) rather than expensive lock-based techniques.
			2. Deadlock Safety: Since atomic variables don’t use locks, they are immune to deadlocks — a significant problem in multi-threaded programming.
			3. Visibility: Atomic variables have built-in visibility features. When a variable is shared between multiple threads, changes made by one thread are immediately visible to other threads.
			
		Атомарні змінні (java.util.concurrent.atomic): Це основний спосіб реалізації оптимістичного блокування в Java. Класи, такі як AtomicInteger, AtomicLong, AtomicReference, використовують низькорівневі, ефективні операції CPU, які називаються CAS (Compare-And-Swap).
		CAS: Операція CAS атомарно (за одну неподільну операцію процесора) робить три речі:
		Зчитує поточне значення змінної.
		Порівнює його з очікуваним старим значенням.
		Якщо вони співпадають, записує нове значення.
		Повертає true, якщо запис відбувся, або false, якщо ні (тобто, інший потік змінив значення). Потік, який використовує CAS, повторює операцію, доки CAS не вдасться.

		import java.util.concurrent.atomic.AtomicInteger;
		class AtomicCounter {
			private AtomicInteger count = new AtomicInteger(0);
			public void increment() {
				int oldValue;
				int newValue;
				do {
					oldValue = count.get(); // Зчитуємо поточне значення
					newValue = oldValue + 1;
				} while (!count.compareAndSet(oldValue, newValue)); // Спробуємо атомарно оновити
				// Якщо CAS повернув false, означає, що oldValue змінилося іншим потоком, повторюємо
			}
		}
		
		Блокування читання в StampedLock: StampedLock дозволяє отримати оптимістичне блокування для читання (tryOptimisticRead()). 
			Якщо під час читання відбувається запис, оптимістичне блокування стає недійсним (validate()), і потік повинен перейти до песимістичного блокування читання або повторити спробу.
========================================================================================
		How does CopyOnWriteArrayList works?
			The CopyOnWriteArrayList class uses a mechanism called copy-on-write which works like this: For every write operation (add, set, remove, etc) it makes a new copy of the elements in the list.
			That means the read operations (get, iterator, listIterator, etc) work on a different copy.
		
		https://tproger.ru/translations/java8-concurrency-tutorial-2/; http://winterbe.com/posts/2015/04/07/java8-concurrency-tutorial-thread-executor-examples/
		Класс ReentrantLock реализует то же поведение, что и обычные неявные блокировки. 
		Интерфейс ReadWriteLock предлагает другой тип блокировок — отдельную для чтения, и отдельную для записи. 
			Этот интерфейс был добавлен из соображения, что считывать данные (любому количеству потоков) безопасно до тех пор, пока ни один из них не изменяет переменную. 
		В Java 8 появился новый тип блокировок — StampedLock. Так же, как и в предыдущих примерах, он поддерживает разделение на readLock() и writeLock(). 
			Однако, в отличие от ReadWriteLock, метод блокировки StampedLock возвращает «штамп» — значение типа long.
		Семафоры — отличный способ ограничить количество потоков, которые одновременно работают над одним и тем же ресурсом


		https://winterbe.com/posts/2015/04/07/java8-concurrency-tutorial-thread-executor-examples/
		
		ExecutorService executor = Executors.newSingleThreadExecutor();
		executor.submit(() -> {
			String threadName = Thread.currentThread().getName();
			System.out.println("Hello " + threadName);
		});


work-stealing algorithm ( ForkJoinPool implements )
wait-free algorithm ( Non-blocking algorithm )
compare-and-swap (CAS)
context switching
Collections.synchronizedList
	

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Java CompletableFuture (https://www.callicoder.com/java-8-completablefuture-tutorial/, https://www.baeldung.com/java-completablefuture-threadpool)
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
		CompletableFuture is an extension to Java’s Future API which was introduced in Java 5.
------------- Limitations of Future
		1. It cannot be manually completed
		2. You cannot perform further action on a Future’s result without blocking
		3. Multiple Futures cannot be chained together
		4. You can not combine multiple Futures together
		5. No Exception Handling

------------- Creating a CompletableFuture
		You can create a CompletableFuture simply by using the following no-arg constructor CompletableFuture<String> completableFuture = new CompletableFuture<String>();
		The get() method blocks until the Future is complete. So, the above call will block forever because the Future is never completed. String result = completableFuture.get()
		You can use CompletableFuture.complete() method to manually complete a Future completableFuture.complete("Future's Result")
		If you want to run some background task asynchronously and don’t want to return anything from the task, then you can use CompletableFuture.runAsync() method.
		CompletableFuture.supplyAsync()  takes a Supplier<T> and returns CompletableFuture<T> where T is the type of the value obtained by calling the given supplier
		// Variations of runAsync() and supplyAsync() methods
			static CompletableFuture<Void>  runAsync(Runnable runnable)
			static CompletableFuture<Void>  runAsync(Runnable runnable, Executor executor)
			static <U> CompletableFuture<U> supplyAsync(Supplier<U> supplier)
			static <U> CompletableFuture<U> supplyAsync(Supplier<U> supplier, Executor executor)
------------- Transforming and acting on a CompletableFuture
		You can use thenApply() method to process and transform the result of a CompletableFuture when it arrives.
		You can also write a sequence of transformations on the CompletableFuture by attaching a series of thenApply() callback methods.
		If you don’t want to return anything from your callback function and just want to run some piece of code after the completion of the Future, then you can use thenAccept() and thenRun() methods. 
			These methods are consumers and are often used as the last callback in the callback chain.
		// thenApply() variants
			<U> CompletableFuture<U> thenApply(Function<? super T,? extends U> fn)
			<U> CompletableFuture<U> thenApplyAsync(Function<? super T,? extends U> fn)
			<U> CompletableFuture<U> thenApplyAsync(Function<? super T,? extends U> fn, Executor executor)
		// thenRun() example
			CompletableFuture.supplyAsync(() -> {
				// Run some computation  
			}).thenRun(() -> {
				// Computation Finished.
			});
------------- Combining two CompletableFutures together
		Combine two dependent futures using thenCompose() 
			So, Rule of thumb here - If your callback function returns a CompletableFuture, and you want a flattened result from the CompletableFuture chain (which in most cases you would), then use thenCompose().
		Combine two independent futures using thenCombine() 
			While thenCompose() is used to combine two Futures where one future is dependent on the other, thenCombine() is used when you want two Futures to run independently and do something after both are complete.
			
		CompletableFuture.allOf is used in scenarios when you have a List of independent futures that you want to run in parallel and do something after all of them are complete.
		CompletableFuture.anyOf() as the name suggests, returns a new CompletableFuture which is completed when any of the given CompletableFutures complete, with the same result.
		
		The exceptionally() callback gives you a chance to recover from errors generated from the original Future. You can log the exception here and return a default value.
		The API also provides a more generic method - handle() to recover from exceptions. It is called whether or not an exception occurs. 
			If an exception occurs, then the res argument will be null, otherwise, the ex argument will be null.
------------- ForkJoinPool.commonPool(https://stackoverflow.com/questions/45460577/default-forkjoinpool-executor-taking-long-time) 
		Runtime.getRuntime().availableProcessors() - 1
------------- Stream Processing with CompletableFuture and Flow in Java 9 (https://speakerdeck.com/trayan/stream-processing-with-completablefuture-and-flow-in-java-9,
			https://www.linkedin.com/pulse/asynchronous-programming-java-completablefuture-aliaksandr-liakh/,
			https://habr.com/ru/articles/327460/)
------------- Push\Pull (https://softwareengineering.stackexchange.com/questions/253398/the-observer-pattern-using-the-pulling-mechanism)

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	completablefuture vs reactive(https://itsobes.ru/JavaSobes/chem-completablefuture-otlichaetsia-ot-future/)
	How Java Is Used for Asynchronous Non-blocking Programming (https://www.alibabacloud.com/blog/how-java-is-used-for-asynchronous-non-blocking-programming_597808)
	Java – the difference between thread per connection vs thread per request (https://itecnote.com/tecnote/java-the-difference-between-thread-per-connection-vs-thread-per-request/#google_vignette)

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Java Concurrency: Understanding Thread Pool and Executors (http://www.codejava.net/java-core/concurrency/java-concurrency-understanding-thread-pool-and-executors)
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        
        The Java Concurrency API supports the following types of thread pools:
        -- Cached thread pool: keeps a number of alive threads and creates new ones as needed.
        -- Fixed thread pool: limits the maximum number of concurrent threads. Additional tasks are waiting in a queue.
        -- Single-threaded pool: keeps only one thread executing one task at a time.
        -- Fork/Join pool: a special thread pool that uses the Fork/Join framework to take advantages of multiple processors to perform 
			heavy work faster by breaking the work into smaller pieces recursively.
        (https://www.youtube.com/watch?v=W82D9eUn6q8)
        You can create an executor by using one of several factory methods provided by the Executors utility class. 
        (java.util.concurrent.Executors(https://docs.oracle.com/javase/8/docs/api/index.html?java/util/concurrent/Executors.html)
        newCachedThreadPool(), newFixedThreadPool(int n),newSingleThreadExecutor(),newScheduledThreadPool(int corePoolSize),newSingleThreadScheduleExecutor()

		An Executor is an object that is responsible for threads management and execution of Runnable tasks submitted from the client code. 
        The Java Concurrency API defines the following 3 base interfaces for executors:
        -- java.util.concurrent.Executor: is the super type of all executors. It defines only one method execute(Runnable).
        -- java.util.concurrent.ExecutorService: is an Executor that allows tracking progress of value-returning tasks (Callable) via Future object, and manages the termination of threads.
         Its key methods include submit() and shutdown().
        -- ScheduledExecutorService: is an ExecutorService that can schedule tasks to execute after a given delay, or to execute periodically. 
        Its key methods are schedule(), scheduleAtFixedRate() and scheduleWithFixedDelay().

		the Callable interface which defines only one method as follows:
			public interface Callable<T> {
				public T call();   
			}
		The ExecutorService interface defines a method that allows us to execute such kind of value-returning tasks: <T> Future<T>   submit(Callable<T> task)
		Then you can invoke the Future’s get() method to obtain the result upon successful completion.
		The Future interface defines the following method that allows you to cancel a task: boolean cancel(boolean mayInterruptIfRunning)
		This method returns false if the task has already completed, has already been cancelled, or could not be cancelled for some other reason.
		If this method returns true:
			- The task will never run if it has not started.
			- In case the task has already started, you can decide to interrupt the thread executing the task by specifying the flag mayInterruptIfRunning = true. Otherwise, the task continues until completes.		
		
		https://www.baeldung.com/java-runnable-callable
		The Callable interface is a generic interface containing a single call() method – which returns a generic value V:
		The Runnable interface is a functional interface and has a single run() method which doesn't accept any parameters and does not return any values.
		
------------------- Virtual threads (https://davidvlijmincx.com/posts/java-virtual-threads/, https://docs.oracle.com/en/java/javase/20/core/virtual-threads.html#GUID-15BDB995-028A-45A7-B6E2-9BA15C2E0501)
		
		Virtual threads are a new kind of thread added as a preview feature to Java 19. 
		What makes them special is that you can have millions of them simultaneously, 
		whereas the Threads we are used to from previous Java versions take up so much memory that we can only have 30 thousand of them before running out of memory. 
		This all depends on the amount of memory available to the JVM.
		
		Runnable task = () -> System.out.println("Hello, world");
		ExecutorService executorService = Executors.newVirtualThreadPerTaskExecutor();
		executorService.execute(task);
		

General Interview Questions:
https://howtodoinjava.com/interview-questions/java-concurrency-interview-questions/
https://www.baeldung.com/java-concurrency-interview-questions

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
??????????????????????????????????????????
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


========================================================================================


1. ConcurrentModificationException:
	Problem - If not concurrent collection ( like ArrayList ) will be changed ( remove or add new element) while some thread is traversing over it using iterator,
			  the iterator.next() will throw ConcurrentModificationException.
	Resolutions:
		- Use concurrent collections ( like CopyOnWriteArrayList, ConcurrentHashMap ) but with cautious.
		- Use for loop instead of iterator
		
2. java.util.concurrent
	2.1 Concurrent Collections
		2.1.1 CopyOnWriteArrayList, CopyOnWriteArraySet:
			  How work: all changes (add, remove) causes new copy of array, no ConcurrentModificationException 
			  When use: when write operations are very rare
			  
		2.2.2 ConcurrentHashMap
			How work: Access to data is blocked by segments (hashcodes), no ConcurrentModificationException
			
	2.2 Queues
		- Diff between non-blocking queues vs blocking - blocking queue suspend threads in case queue is empty or overloaded ( Producer/Consumer )
		2.2.1 non-blocking queues: ConcurrentLinkedQueue, ConcurrentLinkedDeque 
			  Concern: can cause problem ( like out of memory )if threads will not be able to handle a lot of data from queue
			  Resolution: use blocking queue ( like ArrayBlockingQueue )
			  
		2.2.2 blocking queues: 
				ArrayBlockingQueue
				DelayQueue - use when need to take element from queue after specified time
				LinkedBlockingQueue - first lock when add element, second lock when fetch element. good performance but need more memory
				SynchronousQueue, TransferQueue - uses one element. When Producer put element then it blocks until Consumer takes it and vice versa.
				
	2.3 Synchronizers
		2.3.1 Semaphore - use counter to allow access to resource. if counter = 0 then thread is allowed to access resource otherwise it will be blocked and will wait.
		2.3.2 CountDownLatch - one or more threads wait until other threads will finish their operations and reduce counter to 0.
		2.3.3 CyclicBarrier - when appropriate count of threads will achive barrier and after that all threads will proceed to execute code.
		2.3.4 Exchanger - exchange objects between two threads
		2.3.4 Phaser  - contains functionality of CyclicBarrier и CountDownLatch
		
	2.4 Executors
		2.4.1 Future - interface with methods: cancel, get, isCancelled, isDone
		2.4.2 FutureTask - implementation of Future interface
		2.4.3 Executor, ExecutorService, ScheduledExecutorService - interfaces which accept Callable or Runnable and return Future
		2.4.4 Executors - factory to create ThreadPoolExecutor, ScheduledThreadPoolExecutor.
		2.4.5 ThreadPoolExecutor - used to run async tasks in thread pool. We need to create this pool using Executors class.
		2.4.6 ScheduledThreadPoolExecutor - run tasks after appropriate delay
		2.4.7 RejectedExecutionHandler - we can define task handler for tasks which could not executed using ThreadPoolExecutor by some reasons
		2.4.7 Fork Join framework - intended to solve recursive tasks.
				Так, за счет разбиения на части, можно добиться их параллельной обработки в разных потоках. 
				Для решения этой задачи можно использовать и обычный ThreadPoolExecutor, 
				но за счет частого переключения контекста и отслеживания контроля исполнения все это не очень эффективно работает. 
				Тут то нам приходит на помощь Fork Join framework в основу которого используется work-stealing алгоритм. 
				Наиболее хорошо раскрывает себя в системах с большим количеством процессоров. 
				
				ForkJoinPool - by default creates threads pool with count of threads equals to count of processors
				ForkJoinTask - base class to execute tasks
				
	2.5 Locks
		2.5.1 Condition - interface with functionality alternative to wait/notify/notifyAll. It has methods like await/signal/signalAll
		2.5.2 ReentrantLock - only one thread can eneter into safe block
		2.5.3 ReentrantReadWriteLock  - multiple readrs do read data in parallel and only one writer can write data
		2.5.4 LockSupport - we can use insted of Thread.suspend() и Thread.resume()
		2.5.5 StampedLock - return a stamp represented by a long value. You can use these stamps to either release a lock or to check if the lock is still valid
		
	2.6 Atomics
		Those classes work faster then synchronized/volatile approach
		2.6.1 AtomicReference - uses compare-and-swap operation.  
		      compareAndSet() method which lets you compare the reference to an expected value (reference) and if they are equal, set a new reference inside the AtomicReference object
		2.6.2 LongAdder - This class is usually preferable over atomic numbers when updates from multiple threads are more common than reads.
		2.6.3 LongAccumulator - more generalized version of LongAdder. Instead of performing simple add operations it builds around a lambda expression of type LongBinaryOperator
			  
		
3. Arrays.sort vs Arrays.parallelSort
		Arrays.parallelSort - uses Fork/Join framework. Sorts primites faster then Arrays.sort
		
4. Future vs CompletableFuture
	- Asynchronous programming is a means of writing non-blocking code by running a task on a separate thread than the main application thread 
	  and notifying the main thread about its progress, completion or failure
	Limitations of Future
		1. It cannot be manually completed
		2. You cannot perform further action on a Future’s result without blocking
		3. Multiple Futures cannot be chained together
		4. No Exception Handling